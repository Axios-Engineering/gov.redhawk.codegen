// ----------------------------------------------------------------------------------------
// <%=nameSpace%>_<%=interfaceName%>_Out_i definition
// ----------------------------------------------------------------------------------------
<%
            if ("dataSDDS".equals(interfaceName)) {
%>
BULKIO_dataSDDS_Out_i::BULKIO_dataSDDS_Out_i(std::string port_name, <%=PREFIX%>_i *_parent) : Port_Uses_base_impl(port_name)
{
    parent = _parent;
    lastStreamData = NULL;
    recConnectionsRefresh = false;
    recConnections.length(0);
}

BULKIO_dataSDDS_Out_i::~BULKIO_dataSDDS_Out_i()
{
}

BULKIO::SDDSStreamDefinition* BULKIO_dataSDDS_Out_i::getStreamDefinition(const char* attachId)
{
    std::map<std::string, std::pair<BULKIO::SDDSStreamDefinition*, std::string> >::iterator groupIter;
    groupIter = attachedGroup.begin();

    while (groupIter != attachedGroup.end()) {
        if (strcmp((*groupIter).first.c_str(), attachId) == 0) {
            return (*groupIter).second.first;
        }
        groupIter++;
    }
    return NULL;
}

char* BULKIO_dataSDDS_Out_i::getUser(const char* attachId)
{
    std::map<std::string, std::pair<BULKIO::SDDSStreamDefinition*, std::string> >::iterator groupIter;
    groupIter = attachedGroup.begin();
    while (groupIter != attachedGroup.end()) {
        if (strcmp((*groupIter).first.c_str(), attachId) == 0) {
            return CORBA::string_dup((*groupIter).second.second.c_str());
        }
        groupIter++;
    }
    return NULL;
}

BULKIO::dataSDDS::InputUsageState BULKIO_dataSDDS_Out_i::usageState()
{
    if (attachedGroup.size() == 0) {
        return BULKIO::dataSDDS::IDLE;
    } else if (attachedGroup.size() == 1) {
        return BULKIO::dataSDDS::BUSY;
    } else {
        return BULKIO::dataSDDS::ACTIVE;
    }
}

BULKIO::SDDSStreamSequence* BULKIO_dataSDDS_Out_i::attachedStreams()
{
    BULKIO::SDDSStreamSequence* seq = new BULKIO::SDDSStreamSequence();
    seq->length(1);
    (*seq)[1] = *lastStreamData;
    return seq;
}

BULKIO::StringSequence* BULKIO_dataSDDS_Out_i::attachmentIds()
{
    BULKIO::StringSequence* seq = new BULKIO::StringSequence();
    seq->length(attachedGroup.size());
    std::map<std::string, std::pair<BULKIO::SDDSStreamDefinition*, std::string> >::iterator groupIter;
    groupIter = attachedGroup.begin();
    int i = 0;
    while (groupIter != attachedGroup.end()) {
        (*seq)[i++] = CORBA::string_dup((*groupIter).first.c_str());
        groupIter++;
    }

    return seq;
}

char* BULKIO_dataSDDS_Out_i::attach(const BULKIO::SDDSStreamDefinition& stream, const char* userid) throw (BULKIO::dataSDDS::AttachError, BULKIO::dataSDDS::StreamInputError)
{
    std::string attachId;
    user_id = userid;
    std::map<BULKIO::dataSDDS::_var_type, std::string>::iterator portIter;
    BULKIO::dataSDDS::_var_type port = NULL;
    lastStreamData = new BULKIO::SDDSStreamDefinition(stream);
    portIter = attachedPorts.begin();
    while (portIter != attachedPorts.end()) {
        port = (*portIter).first;
        port->detach(attachedPorts[port].c_str());
        attachedGroup.erase((*portIter).second);
        portIter++;
    }
    std::vector< std::pair<BULKIO::dataSDDS::_var_type, std::string> >::iterator portIter2 = outConnections.begin();
    while (portIter2 != outConnections.end()) {
        port = (*portIter2).first;
        attachId = port->attach(stream, user_id.c_str());
        attachedGroup.insert(std::make_pair(attachId, std::make_pair(lastStreamData, user_id)));
        attachedPorts[port] = attachId;
        portIter2++;
    }
    return CORBA::string_dup(attachId.c_str());
}

void BULKIO_dataSDDS_Out_i::detach(const char* attachId)
{
    std::vector< std::pair<BULKIO::dataSDDS::_var_type, std::string> >::iterator portIter = outConnections.begin();
    std::map<BULKIO::dataSDDS::_var_type, std::string>::iterator portIter2;
    while (portIter != outConnections.end()) {
        portIter2 = attachedPorts.begin();
        while (portIter2 != attachedPorts.end()) {
            if ((*portIter2).first == (*portIter).first) {
                (*(*portIter).first).detach(attachedPorts[(*portIter).first].c_str());
                return;
            }
            portIter2++;
        }
        portIter++;
    }
}
void BULKIO_dataSDDS_Out_i::pushSRI(const BULKIO::StreamSRI& H, const BULKIO::PrecisionUTCTime& T)
{
    boost::mutex::scoped_lock lock(updatingPortsLock);   // don't want to process while command information is coming in

    if (active) {
        for (unsigned int i = 0; i < outConnections.size(); i++) {
            try {
                outConnections[i].first->pushSRI(H, T);
            } catch(...) {
                std::cout << "Call to pushSRI by BULKIO_dataSDDS_Out_i failed" << std::endl;
            }
        }
    }

    currentSRIs[std::string(H.streamID)] = std::make_pair(H, T);
    refreshSRI = false;

    return;
}
<%
            } else {
%>
<%=nameSpace%>_<%=interfaceName%>_Out_i::<%=nameSpace%>_<%=interfaceName%>_Out_i(std::string port_name) :
Port_Uses_base_impl(port_name)
{
    recConnectionsRefresh = false;
    recConnections.length(0);
}


<%=nameSpace%>_<%=interfaceName%>_Out_i::~<%=nameSpace%>_<%=interfaceName%>_Out_i()
{
}

/*
 * pushSRI
 *     description: send out SRI describing the data payload
 *
 *  H: structure of type BULKIO::StreamSRI with the SRI for this stream
 *    hversion
 *    xstart
 *    xdelta
 *    xunits: unit types from Platinum specification
 *    subsize: 0 if the data is one-dimensional
 *    ystart
 *    ydelta
 *    yunits: unit types from Platinum specification
 *    mode: 0-scalar, 1-complex
 *    streamID: stream identifier
 *    sequence<CF::DataType> keywords: unconstrained sequence of key-value pairs for additional description
 */
void <%=nameSpace%>_<%=interfaceName%>_Out_i::pushSRI(const BULKIO::StreamSRI& H)
{
    std::vector < std::pair < <%=nameSpace%>::<%=interfaceName%>_var, std::string > >::iterator i;

    boost::mutex::scoped_lock lock(updatingPortsLock);   // don't want to process while command information is coming in

    if (active) {
        for (i = outConnections.begin(); i != outConnections.end(); ++i) {
            try {
                ((*i).first)->pushSRI(H);
            } catch(...) {
                std::cout << "Call to pushSRI by <%=nameSpace%>_<%=interfaceName%>_Out_i failed" << std::endl;
            }
        }
    }

    currentSRIs[std::string(H.streamID)] = H;
    refreshSRI = false;

    return;
}


<%
            } // end else (if dataSDDS)
%>
