<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.template.device.push"
imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.Property
gov.redhawk.ide.codegen.cplusplus.CppHelper
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation
gov.redhawk.ide.preferences.RedhawkIdePreferenceConstants
java.util.Arrays
java.util.HashMap
java.util.HashSet
java.util.List
mil.jpeojtrs.sca.scd.Ports
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.SupportsInterface
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"
class="DResourceCppTemplate"
skeleton="../../generator.skeleton2"
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    Ports ports = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts();
    EList<Provides> provides = ports.getProvides();
    EList<Uses> uses = ports.getUses();
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    CppHelper _cppHelper = new CppHelper();
    String deviceType = softPkg.getDescriptor().getComponent().getComponentType();
    boolean aggregateDevice = false;
    if (deviceType.contains(RedhawkIdePreferenceConstants.EXECUTABLE_DEVICE.toLowerCase())) {
        deviceType = "Executable";
    } else if (deviceType.contains(RedhawkIdePreferenceConstants.LOADABLE_DEVICE.toLowerCase())) {
        deviceType = "Loadable";
    } else { 
        deviceType = "";
    } 
    if (deviceType == RedhawkIdePreferenceConstants.LOADABLE_DEVICE.toLowerCase()) {
        deviceType = "Loadable";
    }
	for (SupportsInterface inter : softPkg.getDescriptor().getComponent().getComponentFeatures().getSupportsInterface()) {
		if (inter.getSupportsName().contains(RedhawkIdePreferenceConstants.AGGREGATE_DEVICE)) {
			aggregateDevice = true;
		}
	}
    boolean memcpyBuffer = false;
    for (Property tempProp : implSettings.getProperties()) {
    	if ("memcpy_buffer".equals(tempProp.getId())) {
    		if (Boolean.parseBoolean(tempProp.getValue())) {
    			memcpyBuffer = true;
    			break;
    		}
    	}
    }
%>

#include "<%=PREFIX%>.h"
<%
    if ((uses.size() > 0)||(provides.size() > 0)) {
%>
#include "port_impl.h"
<%
    }
%>

<%=PREFIX%>_i::<%=PREFIX%>_i(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl) :
          <%=deviceType%>Device_impl (devMgr_ior, id, lbl, sftwrPrfl) <% if (aggregateDevice) {%>, AggregateDevice_impl ()<% }%>{
    initResource(devMgr_ior, id, lbl, sftwrPrfl);
};

<%=PREFIX%>_i::<%=PREFIX%>_i(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, char *compDev) :
          <%=deviceType%>Device_impl (devMgr_ior, id, lbl, sftwrPrfl, compDev) <% if (aggregateDevice) {%>, AggregateDevice_impl ()<% }%>{
    initResource(devMgr_ior, id, lbl, sftwrPrfl);
};

<%=PREFIX%>_i::<%=PREFIX%>_i(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, CF::Properties capacities) :
          <%=deviceType%>Device_impl (devMgr_ior, id, lbl, sftwrPrfl) <% if (aggregateDevice) {%>, AggregateDevice_impl ()<% }%>{
    initResource(devMgr_ior, id, lbl, sftwrPrfl);
};

<%=PREFIX%>_i::<%=PREFIX%>_i(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, CF::Properties capacities, char *compDev) :
          <%=deviceType%>Device_impl (devMgr_ior, id, lbl, sftwrPrfl, compDev) <% if (aggregateDevice) {%>, AggregateDevice_impl ()<% }%>{
    initResource(devMgr_ior, id, lbl, sftwrPrfl);
};

void <%=PREFIX%>_i::initResource(char *devMgr_ior, char *id, char *label, char *sftwrPrfl) 
{
    loadProperties();

<%
    int port_count = 0;
    
    if (provides.size() > 0) {
%>
    //
    // Provides (input) ports
    //
<%
        for (Provides pro : provides) {
            Interface iface = IdlUtil.getInstance().getInterface(search_paths, pro.getRepID().split(":")[1], true);
            if (iface == null) {
            	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + pro.getRepID()));
            }
            String nameSpace = iface.getNameSpace();
            String interfaceName = iface.getName();
%>
    <%=nameSpace%>_<%=interfaceName%>_In_i* tmp<%=port_count%> = new <%=nameSpace%>_<%=interfaceName%>_In_i("<%=pro.getProvidesName()%>", this);
    registerInPort(tmp<%=port_count%>);

<%
            port_count = port_count + 1; 
        } // end for provides
    } // end if provides
    
    if (uses.size() > 0) { 
%>
    //
    // Uses (output) ports
    //
<%
        for (Uses use : uses) {
            Interface iface = IdlUtil.getInstance().getInterface(search_paths, use.getRepID().split(":")[1], true);
            if (iface == null) {
            	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + use.getRepID()));
            }
            String nameSpace = iface.getNameSpace();
            String interfaceName = iface.getName();
%>
    <%=nameSpace%>_<%=interfaceName%>_Out_i* tmp<%=port_count%> = new <%=nameSpace%>_<%=interfaceName%>_Out_i("<%=use.getUsesName()%>"<%if ("dataSDDS".equals(interfaceName)) {%>, this<%}%>);
    registerOutPort(tmp<%=port_count%>, tmp<%=port_count%>->_this());

<%
            port_count = port_count + 1;
        } // end for uses
    } // end if uses
%>
    naming_service_name = label;

    //Initialize variables
    // TODO
    thread_started = false;
};

<%=PREFIX%>_i::~<%=PREFIX%>_i() {
};

CORBA::Boolean <%=PREFIX%>_i::allocateCapacity (const CF::Properties & capacities)
    throw (CORBA::SystemException, CF::Device::InvalidCapacity, CF::Device::InvalidState) 
{
    
    bool response = true;
    std::string tmp;
    propertyContainer *pCptr;

    for (unsigned int i = 0; i < capacities.length(); i++) {
        tmp = capacities[i].id;
        pCptr = getPropFromId(tmp);
        if (!pCptr) {
            response = false;
            break;
        } else if (pCptr->compare(capacities[i].value) > 0) {
            response = false;
            break;
        }
    }
    if (!response) {
        return false;
    }
        
    for (unsigned int i = 0; i < capacities.length(); i++) {
        tmp = capacities[i].id;
        pCptr = getPropFromId(tmp);
        pCptr->decrement(capacities[i].value);
    }
    return true;
}

void <%=PREFIX%>_i::deallocateCapacity (const CF::Properties & capacities)
	throw (CORBA::SystemException, CF::Device::InvalidCapacity, CF::Device::InvalidState) 
{

    std::string tmp;
    propertyContainer *pCptr;

    for (unsigned int i=0; i<capacities.length(); i++) {
        tmp = capacities[i].id;
        pCptr = getPropFromId(tmp);
        if (!pCptr) {
            continue;
        }
        pCptr->increment(capacities[i].value);
    }
}
<%
    if ((uses.size() > 0) || (provides.size() > 0)) {
%>

/*************************************************************************************************
  Port service routines
    
  These are functions that have been added to the component to service port calls. The file port_impl.cpp
  does all the annoying CORBA stuff.
    
  In the case of input ports, the port in port_impl handles all the
  receive CORBA stuff and calls the component's function with the same name. The function knows who the call is
  from based on the input argument port_name, which is the framework-level port name.

  If port_name corresponds to an input port, then this function is where you would add your servicing code. Note
  that each of these functions contains a process_data_lock mutex for the input port section. This is so that when
  the control information is process, the component won't process any data (and that it will finish whatever processing
  it's doing before handling the control call)

  If port_name is an output port, then this call just makes a call to the appropriate output port (again, implemented
  in port_impl.cpp), which will then handle the CORBA stuff for you. To use the output port, just call the function
  and give it the name of the port that should be used to output the data.
  
  These ports are where it would be a good place to set the data_in_signal that the main processing thread
  uses to iterate.
*************************************************************************************************/
<%
        boolean writePushSRI_provides = false;
        boolean writePushSRI_uses = false;
        boolean writeSDDSPushSRI_provides = false;
        boolean writeSDDSPushSRI_uses = false;
        HashMap<String, Interface> intMap = new HashMap<String, Interface>();
        HashSet<String> usesList = new HashSet<String>();
        

        for (Uses entry : uses) {
            String intName = entry.getRepID();
            Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
            if (iface == null) {
            	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
            }
            intMap.put(intName, iface);
            String interfaceName = iface.getName();    
            for (Operation op : iface.getOperations()) {
                if ("pushSRI".equals(op.getName())) {
                    writePushSRI_uses |= !"dataSDDS".equals(interfaceName);
                    writeSDDSPushSRI_uses |= "dataSDDS".equals(interfaceName);
                    break;
                }
            }
           	usesList.add(intName);
        }
        
        HashSet<String> providesList = new HashSet<String>();
        for (Provides entry : provides) {
            String intName = entry.getRepID();
            Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
            if (iface == null) {
            	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
            }
            intMap.put(intName, iface);
            String interfaceName = iface.getName();    
            for (Operation op : iface.getOperations()) {
                if ("pushSRI".equals(op.getName())) {
                    writePushSRI_provides |= !"dataSDDS".equals(interfaceName);
                    writeSDDSPushSRI_provides |= "dataSDDS".equals(interfaceName);
                    break;
                }
            }
            providesList.add(intName);
        }
        HashSet<String> commonList = new HashSet<String>();
        for (String entry : usesList) {
            if (providesList.contains(entry)) {
                commonList.add(entry);
                continue;
            }
        }
        
        usesList.removeAll(commonList);
        providesList.removeAll(commonList);

        for (String entry : commonList) {
            Interface iface = intMap.get(entry);
            if (iface != null) {
                String nameSpace = iface.getNameSpace();
                String interfaceName = iface.getName();    
                for (Operation op : iface.getOperations()) {
                    int numParams = op.getParams().size();
                    boolean pushPacket = false;
                    if ("pushSRI".equals(op.getName())) {
                        continue;
                    } else if ("pushPacket".equals(op.getName()) && !"dataXML".equals(interfaceName)) {
                        pushPacket = true;
                    }
%>

<%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=PREFIX%>_i::<%=op.getName()%>(std::string port_name<%if (numParams != 0) {%>, <%} else {%>)<%}
                    for (int i = 0; i < numParams; i++) {
                        if (pushPacket && (i == 0) && !memcpyBuffer && !"dataFile".equals(interfaceName)) {
                            String dataTransfer = _cppHelper.getCppMapping(op.getParams().get(i).getCxxType());
                            if (dataTransfer.startsWith("std::vector")) {
                                if (dataTransfer.endsWith("& ")) {
                                    dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 3) + "*";
                                } else { 
                                    dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 2) + "*";
                                }
                            } 
                            %><%=dataTransfer%> <%=op.getParams().get(i).getName()%>, unsigned long length<%
                        } else {
                            %><%=_cppHelper.getCppMapping(op.getParams().get(i).getCxxType())%><%
                            %> <%=op.getParams().get(i).getName()%><%
                        }
                        if (i == (numParams - 1)) {
                            %>)<%
                        } else {
                            %>, <%
                        }
                    } // end for params
%>
{
<%
                    if (!"void".equals(op.getCxxReturnType())) {
%>
    <%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> retval = <%=_cppHelper.getInitialValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%>;
    
<%
                    }

                    if (provides.size() > 0) {
%>
    std::map<std::string, Port_Provides_base_impl *>::iterator p_in;
    p_in = inPorts.find(port_name);
    bool input_port = (p_in != inPorts.end());
<%
                    }
                    if (!pushPacket) {
%>
<%
                        if (uses.size() > 0) {
%>

    std::map<std::string, Port_Uses_base_impl *>::iterator p_out;
    p_out = outPorts.find(port_name);
    bool output_port = (p_out != outPorts.end());

    if (output_port)
    {
        
<%
                            if (!"void".equals(op.getCxxReturnType())) {
%>
        retval = <%         }%>((<%=nameSpace%>_<%=interfaceName%>_Out_i *)p_out->second)-><%=op.getName()%>(<%
                            for (int i = 0; i < numParams; i++) {
                                %><%=op.getParams().get(i).getName()%><%
                                if (i != (numParams - 1)) {
                                    %>, <%
                                }
                            }
        %>); // send out the command
    }
<%
                        }
%>
    else if (input_port)
    {
<%
                    } else {
%>

    if (input_port)
    {
<%
                    }
%>
        process_data_lock.lock();    // don't want to process while command information is coming in
        // Process the input command here
        // TODO
        
<%
                    if (!memcpyBuffer && pushPacket) {
%>
        // MAKE SURE TO DELETE THIS BUFFER WHEN DONE!!!!!
        delete data;
<%
                    }
%>
        process_data_lock.unlock();
    }
    
    return<%if (!"void".equals(op.getCxxReturnType())) {%> retval<%}%>;
}
<%
                } // end for operations
            } // end if interfaces
        } // end for commonList

        for (String entry : usesList) {
            Interface iface = intMap.get(entry);
            if (iface != null) {
                String nameSpace = iface.getNameSpace();
                String interfaceName = iface.getName();    
                for (Operation op : iface.getOperations()) {
                    int numParams = op.getParams().size();
                    if ("pushPacket".equals(op.getName()) && !"dataXML".equals(interfaceName)) {
                        continue;
                    } else if ("pushSRI".equals(op.getName())) {
                        continue;
                    }
%>

<%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=PREFIX%>_i::<%=op.getName()%>(std::string port_name<%if (numParams != 0) {%>, <%} else {%>)<%}
                    for (int i = 0; i < numParams; i++) {
                        %><%=_cppHelper.getCppMapping(op.getParams().get(i).getCxxType())%><%
                        %> <%=op.getParams().get(i).getName()%><%
                        if (i == (numParams - 1)) {
                            %>)<%
                        } else {
                            %>, <%
                        }
                    }
%>
{
<%
                    if (!"void".equals(op.getCxxReturnType())) {
%>
    <%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> retval = <%=_cppHelper.getInitialValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%>;
    
<%
                    }
%>
    std::map<std::string, Port_Uses_base_impl *>::iterator p_out;
    p_out = outPorts.find(port_name);
    bool output_port = (p_out != outPorts.end());

    if (output_port)
    {
        
<%
                    if (!"void".equals(op.getCxxReturnType())) {
%>
        retval = <% }%>((<%=nameSpace%>_<%=interfaceName%>_Out_i *)p_out->second)-><%=op.getName()%>(<%
                    for (int i = 0; i < numParams; i++) {
                        %><%=op.getParams().get(i).getName()%><%
                        if (i != (numParams - 1)) {
                            %>, <%
                        }
                    }
        %>); // send out the command
    }

    return<%if (!"void".equals(op.getCxxReturnType())) {%> retval<%}%>;
}
<%
                } // end for Operations
            } // end if interfaces
        } // end if usesList

        for (String entry : providesList) {
            Interface iface = intMap.get(entry);
            if (iface != null) {
                for (Operation op : iface.getOperations()) {
                    int numParams = op.getParams().size();
                    boolean pushPacket = false;
                    if ("pushSRI".equals(op.getName())) {
                        continue;
                    } else if ("pushPacket".equals(op.getName())) {
                        pushPacket = true;
                    }
%>

<%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=PREFIX%>_i::<%=op.getName()%>(std::string port_name<%if (numParams != 0) {%>, <%} else {%>)<%}
                    for (int i = 0; i < numParams; i++) {
                        if (pushPacket && (i == 0) && !memcpyBuffer && !"dataFile".equals(iface.getName())) {
                            String dataTransfer = _cppHelper.getCppMapping(op.getParams().get(i).getCxxType());
                            if (dataTransfer.startsWith("std::vector")) {
                                if (dataTransfer.endsWith("& ")) {
                                    dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 3) + "*";
                                } else { 
                                    dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 2) + "*";
                                }
                            } 
                        %><%=dataTransfer%> <%=op.getParams().get(i).getName()%>, unsigned long length<%
                        } else {
                        %><%=_cppHelper.getCppMapping(op.getParams().get(i).getCxxType())%> <%=op.getParams().get(i).getName()%><%
                        }
                        if (i == (numParams - 1)) {
                            %>)<%
                        } else {
                            %>, <%
                        }
                    }
%>
{
<%
                    if (!"void".equals(op.getCxxReturnType())) {
%>
    <%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> retval = <%=_cppHelper.getInitialValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%>;

<%
                    }
%>
    std::map<std::string, Port_Provides_base_impl *>::iterator p_in;
    p_in = inPorts.find(port_name);
    bool input_port = (p_in != inPorts.end());

    if (input_port) {
        process_data_lock.lock();    // don't want to process while command information is coming in
        // Process the input command here
        // TODO

<%
                    if (!memcpyBuffer && pushPacket) {
%>
        // MAKE SURE TO DELETE THIS BUFFER WHEN DONE!!!!!
        delete data;
<%
                    }
%>
        process_data_lock.unlock();
    }

    return<%if (!"void".equals(op.getCxxReturnType())) {%> retval<%}%>;

}
<%
                } // end for operations
            } // end if interfaces
        } // end for providesList
    
        if (writePushSRI_uses || writePushSRI_provides) {
%>

void <%=PREFIX%>_i::pushSRI(std::string port_name, const BULKIO::StreamSRI& H)
{
<%
            if (writePushSRI_uses) {
%>
    std::map<std::string, Port_Uses_base_impl *>::iterator p_out;
    p_out = outPorts.find(port_name);
    bool output_port = (p_out != outPorts.end());
    
<%
            }
            if (writePushSRI_provides) {
%>
    std::map<std::string, Port_Provides_base_impl *>::iterator p_in;
    p_in = inPorts.find(port_name);
    bool input_port = (p_in != inPorts.end());
    
<%
            }
            if (writePushSRI_uses) {
%>
    if (output_port)
    {
<%
                for (Uses use : uses) {
                    String intName = use.getRepID();
                    Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
                    if (iface == null) {
                    	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
                    }
                    String nameSpace = iface.getNameSpace();
                    String interfaceName = iface.getName();
                    for (Operation op : iface.getOperations()) {
                        if ("pushSRI".equals(op.getName()) && !"dataSDDS".equals(interfaceName)) {
%>
        if (!strcmp(port_name.c_str(), "<%=use.getUsesName()%>")) {
            ((<%=nameSpace%>_<%=interfaceName%>_Out_i*)p_out->second)->pushSRI(H); // send out the command
        }
<%
                            break;
                        } // end if pushSRI
                    } // end for op
                } //end for use 
%>
    }
    
<%
            } // end if uses sri
            if (writePushSRI_provides) { 
%>
    if (input_port) {
        process_data_lock.lock();    // don't want to process while command information is coming in
        // Process the input command here
        // TODO
        process_data_lock.unlock();
    }
    
<%
            } 
%>
    return;
}
<%
        } // end if writePushSRI
        if (writeSDDSPushSRI_uses || writeSDDSPushSRI_provides) {
%>

void <%=PREFIX%>_i::pushSRI(std::string port_name, const BULKIO::StreamSRI& H, const BULKIO::PrecisionUTCTime& T)
{
<%
            if (writeSDDSPushSRI_uses) {
%>
    std::map<std::string, Port_Uses_base_impl *>::iterator p_out;
    p_out = outPorts.find(port_name);
    bool output_port = (p_out != outPorts.end());
    
<%
            }
            if (writeSDDSPushSRI_provides) {
%>
    std::map<std::string, Port_Provides_base_impl *>::iterator p_in;
    p_in = inPorts.find(port_name);
    bool input_port = (p_in != inPorts.end());
    
<%
            }
            if (writeSDDSPushSRI_uses) {
%>
    if (output_port)
    {
<%
                for (Uses use : uses) {
                    String intName = use.getRepID();
                    Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
                    if (iface == null) {
                    	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
                    }
                    String nameSpace = iface.getNameSpace();
                    String interfaceName = iface.getName();
                    for (Operation op : iface.getOperations()) {
                        if ("pushSRI".equals(op.getName()) && "dataSDDS".equals(interfaceName)) {
%>
        if (!strcmp(port_name.c_str(), "<%=use.getUsesName()%>")) {
            ((<%=nameSpace%>_<%=interfaceName%>_Out_i*)p_out->second)->pushSRI(H, T); // send out the command
        }
<%
                            break;
                        } // end if pushSRI
                    } // end for op
                } //end for use 
%>
    }
    
<%
            } // end if uses sri
            if (writeSDDSPushSRI_provides) { 
%>
    if (input_port) {
        process_data_lock.lock();    // don't want to process while command information is coming in
        // Process the input command here
        // TODO
        process_data_lock.unlock();
    }
    
<%
            } 
%>
    return;
}
<%
        } // end if writeSDDSPushSRI
    
    } // end if has ports
%>
