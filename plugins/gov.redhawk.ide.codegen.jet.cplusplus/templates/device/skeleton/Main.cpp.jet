<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.template.device.skeleton"
imports="gov.redhawk.ide.codegen.jet.TemplateParameter
mil.jpeojtrs.sca.spd.SoftPkg
mil.jpeojtrs.sca.spd.Implementation
gov.redhawk.ide.codegen.ImplementationSettings"
class="DMainCppTemplate" 
skeleton="../../generator.skeleton"
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
%>
#include "<%=PREFIX%>.h"

<%=PREFIX%>_i *devicePtr;

CREATE_LOGGER(Test<%=PREFIX%>Device)

void signal_catcher(int sig)
{
    // IMPORTANT Don't call exit(...) in this function
    // issue all CORBA calls that you need for cleanup here before calling ORB shutdown
    LOG_DEBUG(Test<%=PREFIX%>Device, "Terminate signal " << sig << " received")
    if (devicePtr) {
        devicePtr->halt();
    } else {
        LOG_DEBUG(Test<%=PREFIX%>Device, "Device not instantiated")
    }
    LOG_DEBUG(Test<%=PREFIX%>Device, "Device halted")
}

int main(int argc, char *argv[])
{
    ossie::ORB *orb = new ossie::ORB;
    struct sigaction sa;
    sa.sa_handler = signal_catcher;
    sa.sa_flags = 0;

    Device_impl::start_device(&devicePtr, sa, argc, argv);
}
