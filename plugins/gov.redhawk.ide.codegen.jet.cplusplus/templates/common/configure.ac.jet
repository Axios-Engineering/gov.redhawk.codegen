<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.template"
imports="gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.model.sca.util.ModelUtil
java.util.regex.Matcher
java.util.regex.Pattern
java.util.List
java.util.HashMap
java.util.Map
mil.jpeojtrs.sca.scd.Interface
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.resources.IResource"
class="ConfigureAcTemplate"
skeleton="../generator.skeleton" 
%>
<% 
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    IResource resource = ModelUtil.getResource(implSettings);
    Implementation impl = templ.getImpl();
    SoftPkg softpkg = (SoftPkg) impl.eContainer();
    
    // Determine softpkg version, set to 1.0.0 if none exists
    String version = "1.0.0";
    String softpkgVersion = null;
    if (softpkg != null) {
        softpkgVersion = softpkg.getVersion();
    }  
    if (softpkgVersion != null && !softpkgVersion.equals("")) {
        version = softpkgVersion;
    }
    
    // Determine what interfaces we require
    Map<String, String> ifaceNameAndVer = new HashMap<String, String>();
    List<Interface> interfaces = softpkg.getDescriptor().getComponent().getInterfaces().getInterface();
    Pattern idlPattern = Pattern.compile("^IDL:(\\w+)/");
    for (Interface iface : interfaces) {
        Matcher match = idlPattern.matcher(iface.getRepid());
        if (match.find()) {
            String interfaceNamespace = match.group(1);
            if ("BULKIO".equals(interfaceNamespace)) {
                ifaceNameAndVer.put("bulkio", " >= 1.8");
            } else if ("REDHAWK".equals(interfaceNamespace)) {
                ifaceNameAndVer.put("redhawk", " >= 1.2.0");
            } else if (! "CF".equals(interfaceNamespace)) {
                ifaceNameAndVer.put(interfaceNamespace.toLowerCase(), "");
            }
        }
    }
%>
AC_INIT(<%=resource.getProject().getName()%>, <%=version%>)
AM_INIT_AUTOMAKE(nostdinc)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL

AC_CORBA_ORB
OSSIE_CHECK_OSSIE
OSSIE_SDRROOT_AS_PREFIX

# Dependencies
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig"
PKG_CHECK_MODULES([PROJECTDEPS], [ossie >= 1.8 omniORB4 >= 4.0.0])
<%
    boolean first = true;
    for (String interfaceNamespace : ifaceNameAndVer.keySet()) {
	    if (interfaceNamespace.equals("extendedevent")) {
	    	continue;
	    }
	    if (first) {
	        first = false;
%>
PKG_CHECK_MODULES([INTERFACEDEPS], [<%=interfaceNamespace%>Interfaces<%=ifaceNameAndVer.get(interfaceNamespace)%><%
        } else {
%> <%=interfaceNamespace%>Interfaces<%=ifaceNameAndVer.get(interfaceNamespace)%><%
        }
    }
    if (!first) {
%>])
<%
    }
%>
OSSIE_ENABLE_LOG4CXX
AX_BOOST_BASE([1.41])
AX_BOOST_THREAD
<%
    if (ifaceNameAndVer.containsKey("bulkio")) {
%>
CHECK_VECTOR_IMPL
<%
    }
%>

AC_CONFIG_FILES(Makefile)
AC_OUTPUT
