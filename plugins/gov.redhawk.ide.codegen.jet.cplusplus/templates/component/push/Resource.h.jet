<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.template.component.push"
imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.Property
gov.redhawk.ide.codegen.cplusplus.CppHelper
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation
java.util.Arrays
java.util.HashSet
java.util.List
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"
class="ResourceHTemplate"
skeleton="../../generator.skeleton2"
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    EList<Uses> uses = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    boolean memcpyBuffer = false;
    for (Property tempProp : implSettings.getProperties()) {
        if ("memcpy_buffer".equals(tempProp.getId())) {
            if (Boolean.parseBoolean(tempProp.getValue())) {
                memcpyBuffer = true;
                break;
            }
        }
    }
%>
#ifndef <%=PREFIX.toUpperCase()%>_IMPL_H
#define <%=PREFIX.toUpperCase()%>_IMPL_H

#include <stdlib.h>
#include <string>
#include <map>
#include <list>

#include "CF/cf.h"

#include "ossie/Resource_impl.h"
#include "ossie/ossieSupport.h"

#include <sys/time.h>
#include <queue>
#include <fstream>

class <%=PREFIX%>_i;
<%
    if ((uses.size() > 0) || (provides.size() > 0)) {
%>
#include "port_impl.h"
#include <ossie/prop_helpers.h>
<%
    }
%>
class <%=PREFIX%>_i : public Resource_impl, public omni_thread
{
<%
    CppHelper _cppHelper = new CppHelper();
    HashSet<String> usesList = new HashSet<String>();
    for (Uses entry : uses) {
        usesList.add(entry.getRepID());
    }
    HashSet<String> providesList = new HashSet<String>();
    for (Provides entry : provides) {
        providesList.add(entry.getRepID());
    }

    for (String entry : providesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
        	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        String nameSpace = iface.getNameSpace();
        String interfaceName = iface.getName();
%>
    friend class <%=nameSpace%>_<%=interfaceName%>_In_i;
<%
    }

    for (String entry : usesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
        	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        String nameSpace = iface.getNameSpace();
        String interfaceName = iface.getName();
%>
    friend class <%=nameSpace%>_<%=interfaceName%>_Out_i;
<%
    }
%>

    public:
        <%=PREFIX%>_i(const char *uuid, omni_condition *con, const char *, ossie::ORB *);

        ~<%=PREFIX%>_i(void);

        void start() throw (CF::Resource::StartError, CORBA::SystemException);

        void stop() throw (CF::Resource::StopError, CORBA::SystemException);

<%
    if ((uses.size() > 0) || (provides.size() > 0)) {
%>
        CORBA::Object_ptr getPort(const char* _id) throw (CF::PortSupplier::UnknownPort, CORBA::SystemException);
        bool compareSRI(BULKIO::StreamSRI &SRI_1, BULKIO::StreamSRI &SRI_2);
<%
    }
%>
        void releaseObject() throw (CF::LifeCycle::ReleaseError, CORBA::SystemException);

        void initialize() throw (CF::LifeCycle::InitializeError, CORBA::SystemException);

        void configure(const CF::Properties&) throw (CORBA::SystemException, CF::PropertySet::InvalidConfiguration, CF::PropertySet::PartialConfiguration);

        // main omni_thread function
        void run(void *args);
        void loadProperties();

<%
    HashSet<String> commonList = new HashSet<String>();
    for (String entry : usesList) {
        if (providesList.contains(entry)) {
            commonList.add(entry);
            continue;
        }
    }

    providesList.removeAll(commonList);
    usesList.removeAll(commonList);
    
    boolean writePushSRI = false;
    boolean writeSDDSPushSRI = false;
    for (String entry : commonList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
        	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        String nameSpace = iface.getNameSpace();
        String interfaceName = iface.getName();
%>
        // Operations for interface: <%=entry%>
<%
        boolean dataFile = "dataFile".equals(interfaceName);
        for (Operation op : iface.getOperations()) {
            int numParams = op.getParams().size();
            boolean pushPacket = false;
            boolean writePushPacket_uses = false;
            if ("pushPacket".equals(op.getName())) {
                writePushPacket_uses = !"dataXML".equals(iface.getName());
                pushPacket = true;
            } else if ("pushSRI".equals(op.getName())) {
                writePushSRI |= !"dataSDDS".equals(interfaceName);
                writeSDDSPushSRI |= "dataSDDS".equals(interfaceName);
                continue;
            }
%>
        <%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>(std::string port_name<%
            if (numParams != 0) {
%>, <%
            } else {
%>);<%
            }
            for (int i = 0; i < numParams; i++) {
                if (pushPacket && (i == 0) && !memcpyBuffer) {
                    String dataTransfer = _cppHelper.getCppMapping(op.getParams().get(i).getCxxType());
                    if (dataTransfer.startsWith("std::vector")) {
                        if (dataTransfer.endsWith("& ")) {
                            dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 3) + "*";
                        } else { 
                            dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 2) + "*";
                        }
                    } 
%><%=dataTransfer%> <%=op.getParams().get(i).getName()%>, unsigned long length<%
                } else {
%><%=_cppHelper.getCppMapping(op.getParams().get(i).getCxxType())%> <%=op.getParams().get(i).getName()%><%
                }
                if (i == (numParams - 1)) {
%>);<%
                } else {
%>, <%
                }
            } // end for params

            if (pushPacket && writePushPacket_uses) {
                String dataTransfer = _cppHelper.getCppMapping(op.getParams().get(0).getCxxType());
                if (dataTransfer.startsWith("std::vector")) {
                    if (dataTransfer.endsWith("& ")) {
                        dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 3) + "*";
                    } else { 
                        dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 2) + "*";
                    }
                }
                
                if (!dataFile) {
%>

        void pushPacket(std::string port_name, <%=dataTransfer%> data, CORBA::ULong length, BULKIO::PrecisionUTCTime& T, bool EOS, std::string& streamID) {
<%
                } else {
%>

        void pushPacket(std::string port_name, <%=dataTransfer%> URL, BULKIO::PrecisionUTCTime& T, bool EOS, std::string& streamID) {
<%
                }
%>
            std::map<std::string, Port_Uses_base_impl *>::iterator p_out;
            p_out = outPorts.find(port_name);
            bool output_port = (p_out != outPorts.end());

            if (output_port)
            {
<%
                    if (!dataFile) {
%>
                ((<%=nameSpace%>_<%=interfaceName%>_Out_i*)p_out->second)->pushPacket(data, length, T, EOS, streamID); // send out the command
<%
                    } else {
%>
                ((<%=nameSpace%>_<%=interfaceName%>_Out_i*)p_out->second)->pushPacket(URL, T, EOS, streamID); // send out the command
<%
                    }
%>
            }

            return;
        }
<%
            } // end if pushPacket
        } // end for Operations
%>

<%
    } // end for commonList
    
    for (String entry : usesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
        	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        String nameSpace = iface.getNameSpace();
        String interfaceName = iface.getName();
%>
        // Operations for interface: <%=entry%>
<%
        boolean dataFile = "dataFile".equals(interfaceName);
        for (Operation op : iface.getOperations()) {
            int numParams = op.getParams().size();
            boolean writePushPacket_uses = false;
            if ("pushPacket".equals(op.getName())) {
                writePushPacket_uses = !"dataXML".equals(iface.getName());
            } else if ("pushSRI".equals(op.getName())) {
                writePushSRI |= !"dataSDDS".equals(interfaceName);
                writeSDDSPushSRI |= "dataSDDS".equals(interfaceName);
                continue;
            }
            
            if (!writePushPacket_uses) {
%>
        <%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>(std::string port_name<%
                if (numParams != 0) {
%>, <%
                } else {
%>);<%
                }
                for (int i = 0; i < numParams; i++) {
%><%=_cppHelper.getCppMapping(op.getParams().get(i).getCxxType())%> <%=op.getParams().get(i).getName()%><%
                    if (i == (numParams - 1)) {
%>);<%
                    } else {
%>, <%
                    }
                }
            } else { 
                String dataTransfer = _cppHelper.getCppMapping(op.getParams().get(0).getCxxType());
                if (dataTransfer.startsWith("std::vector")) {
                    if (dataTransfer.endsWith("& ")) {
                        dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 3) + "*";
                    } else { 
                        dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 2) + "*";
                    }
                }
                
                if (!dataFile) {
%>
        void pushPacket(std::string port_name, <%=dataTransfer%> data, CORBA::ULong length, BULKIO::PrecisionUTCTime& T, bool EOS, std::string& streamID) {
<%
                } else {
%>
        void pushPacket(std::string port_name, <%=dataTransfer%> URL, BULKIO::PrecisionUTCTime& T, bool EOS, std::string& streamID) {
<%
                }
%>
            std::map<std::string, Port_Uses_base_impl *>::iterator p_out;
            p_out = outPorts.find(port_name);
            bool output_port = (p_out != outPorts.end());

            if (output_port)
            {
<%
                if (!dataFile) {
%>
                ((<%=nameSpace%>_<%=interfaceName%>_Out_i*)p_out->second)->pushPacket(data, length, T, EOS, streamID); // send out the command
<%
                } else {
%>
                ((<%=nameSpace%>_<%=interfaceName%>_Out_i*)p_out->second)->pushPacket(URL, T, EOS, streamID); // send out the command
<%
                }
%>
            }

            return;
        }
<%
            } // end if writePushPacket_uses
        } // end for Operations
%>

<%
    } // end for usesList

    for (String entry : providesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
        	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
%>
        // Operations for interface: <%=entry%>
<%
        String interfaceName = iface.getName();    
        for (Operation op : iface.getOperations()) {
            int numParams = op.getParams().size();
            boolean pushPacket = false;
            if ("pushPacket".equals(op.getName())) {
                pushPacket = true;
            } else if ("pushSRI".equals(op.getName())) {
                writePushSRI |= !"dataSDDS".equals(interfaceName);
                writeSDDSPushSRI |= "dataSDDS".equals(interfaceName);
                continue;
            }
%>
        <%=_cppHelper.getCppMapping(op.getCxxReturnType())%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>(std::string port_name<%
            if (numParams != 0) {
%>, <%
            } else {
%>);<%
            }
            for (int i = 0; i < numParams; i++) {
                if (pushPacket && (i == 0) && !memcpyBuffer) {
                    String dataTransfer = _cppHelper.getCppMapping(op.getParams().get(i).getCxxType());
                    if (dataTransfer.startsWith("std::vector")) {
                        if (dataTransfer.endsWith("& ")) {
                            dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 3) + "*";
                        } else { 
                            dataTransfer = dataTransfer.substring(12, dataTransfer.length() - 2) + "*";
                        }
                    } 
%><%=dataTransfer%> <%=op.getParams().get(i).getName()%>, unsigned long length<%
                } else {
%><%=_cppHelper.getCppMapping(op.getParams().get(i).getCxxType())%> <%=op.getParams().get(i).getName()%><%
                }
                if (i == (numParams - 1)) {
%>);<%
                } else {
%>, <%
                }
            } // end for params
        } // end for Operations
%>

<%
    } // end for providesList

    if (writePushSRI) {
%>
        void pushSRI(std::string port_name, const BULKIO::StreamSRI& H);
<%
    }
    if (writeSDDSPushSRI) {
%>
        void pushSRI(std::string port_name, const BULKIO::StreamSRI& H, const BULKIO::PrecisionUTCTime& T);
<%
    }
%>

    private:
        // For component shutdown
        omni_condition *component_running;
        std::string comp_uuid;

        bool component_alive;

        std::string naming_service_name;

        ossie::ORB *orb;

        // Threading stuff
        omni_condition *data_in_signal;
        omni_mutex data_in_signal_lock;
        omni_mutex process_data_lock;
        omni_mutex thread_exit_lock;
        omni_mutex attribute_access;    // used when modifying variables

        // Functional members
        // Housekeeping and data management variables
        bool thread_started;
};
#endif
