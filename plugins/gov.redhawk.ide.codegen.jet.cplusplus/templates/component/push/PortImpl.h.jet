<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.template.component.push"
imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.Property
gov.redhawk.ide.codegen.cplusplus.CppHelper
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.idl.Attribute
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation
java.util.ArrayList
java.util.Arrays
java.util.HashSet
java.util.List
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"
class="PortImplHTemplate"
skeleton="../../generator.skeleton2"
%>
#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

<% 
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    EList<Uses> uses = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    boolean memcpyBuffer = false;
    for (Property tempProp : implSettings.getProperties()) {
    	if ("memcpy_buffer".equals(tempProp.getId())) {
            if (Boolean.parseBoolean(tempProp.getValue())) {
                memcpyBuffer = true;
                break;
            }
        }
    }
%>
#include "ossie/Port_impl.h"
#include <list>

class <%=PREFIX%>_i;

<%
    CppHelper _cppHelper = new CppHelper();
    HashSet<String> includeList = new HashSet<String>();    
    HashSet<String> usesList = new HashSet<String>();
    boolean includeQueryablePort = false;
    for (Uses entry : uses) {
        String intName = entry.getRepID();
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
        if (iface == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
        }
        includeList.add(iface.getNameSpace() + "/" + iface.getFilename());
   	    usesList.add(intName);
        if (!intName.startsWith("IDL:BULKIO/")) {
            includeQueryablePort = true;
        }
    }
    HashSet<String> providesList = new HashSet<String>();
    for (Provides entry : provides) {
        String intName = entry.getRepID();
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
        if (iface == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
        }
        includeList.add(iface.getNameSpace() + "/" + iface.getFilename());
        providesList.add(intName);
        if (!intName.startsWith("IDL:BULKIO/")) {
            includeQueryablePort = true;
        }
    }
    
    for (String entry : includeList) {
%>
#include "<%=entry%>.h"
<%
    }
    
    if (includeQueryablePort) {
%>
#include "ossie/CF/QueryablePort.h"
<%
    }
    
    for (String entry : usesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        
        String nameSpace = iface.getNameSpace();
        String interfaceName = iface.getName();
        String dataTransfer = "";
        String tmpDataTransfer = "";
        String ppDataTransfer = "";
        String rawTransferType = "char";
        boolean isBulkio = "BULKIO".equals(nameSpace);
%>

// ----------------------------------------------------------------------------------------
// <%=nameSpace%>_<%=interfaceName%>_Out_i declaration
// ----------------------------------------------------------------------------------------
#ifndef _<%=nameSpace%>_<%=interfaceName%>_Out_i
#define _<%=nameSpace%>_<%=interfaceName%>_Out_i

<%
        if (isBulkio) {
%>
<%@ include file="BULKIOPortImpl.h.uses.jetinc"%>
<%
        } else {
%>

class <%=nameSpace%>_<%=interfaceName%>_Out_i : public Port_Uses_base_impl, public POA_ExtendedCF::QueryablePort
{
    public:
        <%=nameSpace%>_<%=interfaceName%>_Out_i(std::string port_name);
        ~<%=nameSpace%>_<%=interfaceName%>_Out_i();
<%
        for (Operation op : iface.getOperations()) {
            int numParams = op.getParams().size();
%>

        <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>(<%
            if (numParams == 0) {
%>);<%
            }
            for (int i = 0; i < numParams; i++) {
%><%=_cppHelper.getCppMapping(op.getParams().get(i).getCxxType())%> <%=op.getParams().get(i).getName()%><%
                if (i == (numParams - 1)) {
%>);<%
                } else {
%>, <%
                }
            } // end for params
        } // end for operations
        
            for (Attribute op : iface.getAttributes()) {
%>
        <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>();

<%
                if (!op.isReadonly()) {
%>
        void <%=op.getName()%>(<%=op.getCxxType()%> data);

<%
                } // end if readonly
            } // end for attributes
%>
        ExtendedCF::UsesConnectionSequence * connections() 
        {
            boost::mutex::scoped_lock lock(updatingPortsLock);   // don't want to process while command information is coming in
            if (recConnectionsRefresh) {
                recConnections.length(outConnections.size());
                for (unsigned int i = 0; i < outConnections.size(); i++) {
                    recConnections[i].connectionId = CORBA::string_dup(outConnections[i].second.c_str());
                    recConnections[i].port = CORBA::Object::_duplicate(outConnections[i].first);
                }
                recConnectionsRefresh = false;
            }
            ExtendedCF::UsesConnectionSequence_var retVal = new ExtendedCF::UsesConnectionSequence(recConnections);
            // NOTE: You must delete the object that this function returns!
            return retVal._retn();
        };

        void connectPort(CORBA::Object_ptr connection, const char* connectionId)
        {
            boost::mutex::scoped_lock lock(updatingPortsLock);   // don't want to process while command information is coming in
            <%=nameSpace%>::<%=interfaceName%>_var port = <%=nameSpace%>::<%=interfaceName%>::_narrow(connection);
            outConnections.push_back(std::make_pair(port, connectionId));
            active = true;
            refreshSRI = true;
        };

        void disconnectPort(const char* connectionId)
        {
            boost::mutex::scoped_lock lock(updatingPortsLock);   // don't want to process while command information is coming in
            for (unsigned int i = 0; i < outConnections.size(); i++) {
                if (outConnections[i].second == connectionId) {
                    outConnections.erase(outConnections.begin() + i);
                    break;
                }
            }

            if (outConnections.size() == 0) {
                active = false;
            }
        };

        std::vector< std::pair<<%=nameSpace%>::<%=interfaceName%>_var, std::string> > _getConnections()
        {
            return outConnections;
        };
        
    private:
<%  
        for (Operation op : iface.getOperations()) {
            int numParams = op.getParams().size();
            if (!"pushSRI".equals(op.getName()) && !("pushPacket".equals(op.getName()) && (numParams == 4))) {
                for (int i = 0; i < numParams; i++) {
                    String iteratorBase = _cppHelper.getBaseSequenceMapping(op.getParams().get(i).getCxxType());
                    if (iteratorBase.length() > 11) {
                        if (iteratorBase.startsWith("std::vector")) {
                            String corbaBase = op.getParams().get(i).getCxxType();
                            int beginingIndex = 0;
                            if (corbaBase.startsWith("const")) {
                                beginingIndex = 6;
                            }
                            if (corbaBase.endsWith("&")) {
%>
    <%=corbaBase.substring(beginingIndex, corbaBase.length()-1)%><%
                            } else {
%>
    <%=corbaBase.substring(beginingIndex, corbaBase.length())%><%
                            }
%> Sequence_<%=op.getName()%>_<%=i%>; <%
                        }
                    }
                } // end for params
            } // end if not pushSRI && not pushPacket
        } // end for operations

%>

        std::vector < std::pair<<%=nameSpace%>::<%=interfaceName%>_var, std::string> > outConnections;
        ExtendedCF::UsesConnectionSequence recConnections;
        bool recConnectionsRefresh;
};
#endif
<%
        }
    } // end for uses ports

    for (String entry : providesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
        	throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        
        String nameSpace = iface.getNameSpace();
        String interfaceName = iface.getName();
        boolean pushPacketCall = false;
        boolean pushPacketXMLCall = false;
        String dataTransfer = "";
        String ppDataTransfer = "";
        boolean isBulkio = "BULKIO".equals(nameSpace);
%>

// ----------------------------------------------------------------------------------------
// <%=nameSpace%>_<%=interfaceName%>_In_i declaration
// ----------------------------------------------------------------------------------------
#ifndef _<%=nameSpace%>_<%=interfaceName%>_In_i
#define _<%=nameSpace%>_<%=interfaceName%>_In_i

<%
        if (isBulkio) {
%>
<%@ include file="BULKIOPortImpl.h.provides.jetinc"%>
<%
        } else {
%>
class <%=nameSpace%>_<%=interfaceName%>_In_i : public POA_<%=nameSpace%>::<%=interfaceName%>, public Port_Provides_base_impl
{
    public:
        <%=nameSpace%>_<%=interfaceName%>_In_i(std::string port_name, <%=PREFIX%>_i *_parent);
        ~<%=nameSpace%>_<%=interfaceName%>_In_i();

<%
        for (Operation op : iface.getOperations()) {
            int numParams = op.getParams().size();
%>
        <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>(<%
            if (numParams == 0) {
%>);<%
            }
            for (int i = 0; i < numParams; i++) {
%><%=op.getParams().get(i).getCxxType()%> <%=op.getParams().get(i).getName()%><%
                if (i == (numParams - 1)) {
%>);<%
                } else {
%>, <%
                }
            } // end for params
        } // end for operations
%>

<%
        for (Attribute op : iface.getAttributes()) {
%>
        <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>();
<%
            if (!op.isReadonly()) {
%>
        void <%=op.getName()%>(<%=op.getCxxType()%> data);

<%
            } // end if readonly
        } // end for attributes
%>
    private:
<%
            for (Operation op : iface.getOperations()) {
                ArrayList<String> vectorList = new ArrayList<String>();
                for (int i = 0; i < op.getParams().size(); i++) {
                    String iteratorBase = _cppHelper.getBaseSequenceMapping(op.getParams().get(i).getCxxType());
                    if (iteratorBase.length() > 11) {
                        if (iteratorBase.substring(0, 11).equals("std::vector")) {
                            vectorList.add(op.getParams().get(i).getName());
                        }
                    }
                }
                for (int i = 0; i < vectorList.size(); i++) {
                    String iteratorBase = _cppHelper.getBaseSequenceMapping(op.getParams().get(i).getCxxType());
        %>
    <%=iteratorBase%> vector_<%=op.getName()%>_<%=i%>;
    
<%
                }
            } // end for Operations
        } // end else !BulkIO
%>
};
#endif

<%
    } // end for providesList
%>

