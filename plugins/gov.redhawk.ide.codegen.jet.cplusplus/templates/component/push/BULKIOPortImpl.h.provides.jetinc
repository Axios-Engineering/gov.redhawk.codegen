<%
        if ("dataSDDS".equals(interfaceName)) {
%>
class BULKIO_dataSDDS_In_i : public POA_BULKIO::dataSDDS, public Port_Provides_base_impl
{
public:
    BULKIO_dataSDDS_In_i(std::string port_name, <%=PREFIX%>_i *_parent);

    ~BULKIO_dataSDDS_In_i();

    BULKIO::PortUsageType state();
    BULKIO::PortStatistics* statistics();
    BULKIO::StreamSRISequence* attachedSRIs();

    class linkStatistics
    {
        public:
            struct statPoint {
                unsigned int elements;
                double secs;
                double usecs;
            };

            linkStatistics() {
                bitSize = 8.0;
                historyWindow = 10;
                receivedStatistics_idx = 0;
                receivedStatistics.resize(historyWindow);
                activeStreamIDs.resize(0);
                runningStats.elementsPerSecond = -1.0;
                runningStats.bitsPerSecond = -1.0;
                runningStats.callsPerSecond = -1.0;
                runningStats.streamIDs.length(0);
                runningStats.timeSinceLastCall = -1;
                enabled = true;
            };

            ~linkStatistics() {
            }

            void setBitSize(double _bitSize) {
                bitSize = _bitSize;
            }

            void setEnabled(bool enable) {
                enabled = enable;
            }

            void update(unsigned int elementsReceived, bool EOS, std::string streamID) {
                if (!enabled) {
                    return;
                }
                struct timeval tv;
                struct timezone tz;
                gettimeofday(&tv, &tz);
                receivedStatistics[receivedStatistics_idx].elements = elementsReceived;
                receivedStatistics[receivedStatistics_idx].secs = tv.tv_sec;
                receivedStatistics[receivedStatistics_idx++].usecs = tv.tv_usec;
                receivedStatistics_idx = receivedStatistics_idx % historyWindow;
                if (!EOS) {
                    std::list<std::string>::iterator p = activeStreamIDs.begin();
                    bool foundStreamID = false;
                    while (p != activeStreamIDs.end()) {
                        if (*p == streamID) {
                            foundStreamID = true;
                            break;
                        }
                        p++;
                    }
                    if (!foundStreamID) {
                        activeStreamIDs.push_back(streamID);
                    }
                } else {
                    std::list<std::string>::iterator p = activeStreamIDs.begin();
                    while (p != activeStreamIDs.end()) {
                        if (*p == streamID) {
                            activeStreamIDs.erase(p);
                            break;
                        }
                        p++;
                    }
                }
            }

            BULKIO::PortStatistics retrieve() {
                if (!enabled) {
                    return runningStats;
                }
                struct timeval tv;
                struct timezone tz;
                gettimeofday(&tv, &tz);

                int idx = (receivedStatistics_idx == 0) ? (historyWindow - 1) : (receivedStatistics_idx - 1);
                double front_sec = receivedStatistics[idx].secs;
                double front_usec = receivedStatistics[idx].usecs;
                double secDiff = tv.tv_sec - receivedStatistics[receivedStatistics_idx].secs;
                double usecDiff = (tv.tv_usec - receivedStatistics[receivedStatistics_idx].usecs) / ((double)1e6);
                double totalTime = secDiff + usecDiff;
                double totalData = 0;
                int startIdx = (receivedStatistics_idx + 1) % historyWindow;
                for (int i = startIdx; i != receivedStatistics_idx; ) {
                    totalData += receivedStatistics[i].elements;
                    i = (i + 1) % historyWindow;
                }
                runningStats.bitsPerSecond = ((totalData * bitSize) / totalTime);
                runningStats.elementsPerSecond = (totalData / totalTime);
                runningStats.callsPerSecond = (double(historyWindow - 1) / totalTime);
                runningStats.timeSinceLastCall = (((double)tv.tv_sec) - front_sec) + (((double)tv.tv_usec - front_usec) / ((double)1e6));
                unsigned int streamIDsize = activeStreamIDs.size();
                std::list< std::string >::iterator p = activeStreamIDs.begin();
                runningStats.streamIDs.length(streamIDsize);
                for (unsigned int i = 0; i < streamIDsize; i++) {
                    if (p != activeStreamIDs.end()) {
                        break;
                    }
                    runningStats.streamIDs[i] = CORBA::string_dup((*p).c_str());
                    p++;
                }
                return runningStats;
            }

        private:
            bool enabled;
            double bitSize;
            BULKIO::PortStatistics runningStats;
            std::vector<statPoint> receivedStatistics;
            std::list< std::string > activeStreamIDs;
            unsigned long historyWindow;
            long receivedStatistics_idx;
    };

    void pushSRI(const BULKIO::StreamSRI& H, const BULKIO::PrecisionUTCTime& T);

    BULKIO::SDDSStreamDefinition* getStreamDefinition(const char* attachId);

    char* getUser(const char* attachId);

    BULKIO::dataSDDS::InputUsageState usageState();

    BULKIO::SDDSStreamSequence* attachedStreams();
    
    BULKIO::StringSequence* attachmentIds();

    char* attach(const BULKIO::SDDSStreamDefinition& stream, const char* userid)
        throw (BULKIO::dataSDDS::AttachError, BULKIO::dataSDDS::StreamInputError);

    void detach(const char* attachId);

    void enableStats(bool enable) {
        stats.setEnabled(enable);
    };

    void setBitSize(double bitSize) {
        stats.setBitSize(bitSize);
    };

    void updateStats(unsigned int elementsReceived, bool EOS, std::string streamID) {
        boost::mutex::scoped_lock lock(statUpdateLock);
        stats.update(elementsReceived, EOS, streamID);
    };

private:
    <%=PREFIX%>_i *parent;
    // maps a stream ID to a pair of Stream and userID
    std::map<std::string, BULKIO::SDDSStreamDefinition*> attachedStreamMap;
    std::map<std::string, std::string > attachedUsers;
    std::map<std::string, std::pair<BULKIO::StreamSRI, BULKIO::PrecisionUTCTime> > currentHs;
    boost::mutex statUpdateLock;
    boost::mutex sriUpdateLock;
    // statistics
    linkStatistics stats;

<%
        } else {
%>
class <%=nameSpace%>_<%=interfaceName%>_In_i : public POA_<%=nameSpace%>::<%=interfaceName%>, public Port_Provides_base_impl
{
    public:
        <%=nameSpace%>_<%=interfaceName%>_In_i(std::string port_name, <%=PREFIX%>_i *_parent);
        ~<%=nameSpace%>_<%=interfaceName%>_In_i();

        void setState(BULKIO::PortUsageType state) { currentState = state; };
<%
        for (Operation op : iface.getOperations()) {
            int numParams = op.getParams().size();
%>
        <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>(<%
            if ("pushPacket".equals(op.getName()) && (numParams == 4)) {
                dataTransfer = _cppHelper.getBaseSequenceMapping(op.getParams().get(0).getCxxType());
                if (dataTransfer.startsWith("std::vector")) {
                    if (ppDataTransfer.endsWith("& ")) {
                        ppDataTransfer = dataTransfer.substring(12, dataTransfer.length() - 2);
                    } else { 
                        ppDataTransfer = dataTransfer.substring(12, dataTransfer.length() - 1);
                    }
                } else if ("dataFile".equals(interfaceName)) {
                    ppDataTransfer = "char";
                }
                pushPacketCall = true;
            } else if ("pushPacket".equals(op.getName()) && "dataXML".equals(interfaceName)) {
                dataTransfer = "char*";
                ppDataTransfer = "char";
                pushPacketXMLCall = true;
            }
            if (numParams == 0) {
%>);<%
            }
            for (int i = 0; i < numParams; i++) {
%><%=op.getParams().get(i).getCxxType()%> <%=op.getParams().get(i).getName()%><%
                if (i == (numParams - 1)) {
%>);<%
                } else {
%>, <%
                }
            } // end for params
        } // end for operations
%>

<%
        for (Attribute op : iface.getAttributes()) {
%>
        <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>();
<%
            if (!op.isReadonly()) {
%>
        void <%=op.getName()%>(<%=op.getCxxType()%> data);

<%
            } // end if readonly
        } // end for attributes
            
        if (pushPacketCall || pushPacketXMLCall) {
%>

        class linkStatistics
        {
            public:
                struct statPoint {
                    unsigned int elements;
                    double secs;
                    double usecs;
                };

                linkStatistics() {
                    bitSize = sizeof(<%=ppDataTransfer%>) * 8.0;
                    historyWindow = 10;
                    receivedStatistics_idx = 0;
                    receivedStatistics.resize(historyWindow);
                    activeStreamIDs.resize(0);
                    runningStats.elementsPerSecond = -1.0;
                    runningStats.bitsPerSecond = -1.0;
                    runningStats.callsPerSecond = -1.0;
                    runningStats.streamIDs.length(0);
                    runningStats.timeSinceLastCall = -1;
                    enabled = true;
                };

                ~linkStatistics() {
                }

                void setEnabled(bool enableStats) {
                    enabled = enableStats;
                }

                void update(unsigned int elementsReceived, bool EOS, std::string streamID) {
                    if (!enabled) {
                        return;
                    }
                    struct timeval tv;
                    struct timezone tz;
                    gettimeofday(&tv, &tz);
                    receivedStatistics[receivedStatistics_idx].elements = elementsReceived;
                    receivedStatistics[receivedStatistics_idx].secs = tv.tv_sec;
                    receivedStatistics[receivedStatistics_idx++].usecs = tv.tv_usec;
                    receivedStatistics_idx = receivedStatistics_idx % historyWindow;
                   if (!EOS) {
                        std::list<std::string>::iterator p = activeStreamIDs.begin();
                        bool foundStreamID = false;
                        while (p != activeStreamIDs.end()) {
                            if (*p == streamID) {
                                foundStreamID = true;
                                break;
                            }
                            p++;
                        }
                        if (!foundStreamID) {
                            activeStreamIDs.push_back(streamID);
                        }
                    } else {
                        std::list<std::string>::iterator p = activeStreamIDs.begin();
                        while (p != activeStreamIDs.end()) {
                            if (*p == streamID) {
                                activeStreamIDs.erase(p);
                                break;
                            }
                            p++;
                        }
                    }
                }

                BULKIO::PortStatistics retrieve() {
                    if (!enabled) {
                        return runningStats;
                    }
                    struct timeval tv;
                    struct timezone tz;
                    gettimeofday(&tv, &tz);

                    int idx = (receivedStatistics_idx == 0) ? (historyWindow - 1) : (receivedStatistics_idx - 1);
                    double front_sec = receivedStatistics[idx].secs;
                    double front_usec = receivedStatistics[idx].usecs;
                    double secDiff = tv.tv_sec - receivedStatistics[receivedStatistics_idx].secs;
                    double usecDiff = (tv.tv_usec - receivedStatistics[receivedStatistics_idx].usecs) / ((double)1e6);
                    double totalTime = secDiff + usecDiff;
                    double totalData = 0;
                    int startIdx = (receivedStatistics_idx + 1) % historyWindow;
                    for (int i = startIdx; i != receivedStatistics_idx; ) {
                        totalData += receivedStatistics[i].elements;
                        i = (i + 1) % historyWindow;
                    }
                    runningStats.bitsPerSecond = ((totalData * bitSize) / totalTime);
                    runningStats.elementsPerSecond = (totalData / totalTime);
                    runningStats.callsPerSecond = (double(historyWindow - 1) / totalTime);
                    runningStats.timeSinceLastCall = (((double)tv.tv_sec) - front_sec) + (((double)tv.tv_usec - front_usec) / ((double)1e6));
                    unsigned int streamIDsize = activeStreamIDs.size();
                    std::list< std::string >::iterator p = activeStreamIDs.begin();
                    runningStats.streamIDs.length(streamIDsize);
                    for (unsigned int i = 0; i < streamIDsize; i++) {
                        if (p != activeStreamIDs.end()) {
                            break;
                        }
                        runningStats.streamIDs[i] = CORBA::string_dup((*p).c_str());
                        p++;
                    }
                    return runningStats;
                }

            private:
                bool enabled;
                double bitSize;
                BULKIO::PortStatistics runningStats;
                std::vector<statPoint> receivedStatistics;
                std::list< std::string > activeStreamIDs;
                unsigned long historyWindow;
                long receivedStatistics_idx;
        };
        
        void enableStats(bool enable) {
            stats.setEnabled(enable);
        };

    private:
<%
            if (memcpyBuffer) {
%>
        <%=dataTransfer%> new_message;
<%
            } else {
%>
        <%=ppDataTransfer%>* new_message;
<%
            }
%>
        <%=PREFIX%>_i *parent;
        BULKIO::StreamSRISequence currentHs;
        boost::mutex sriUpdateLock;
        bool sriChanged;
        BULKIO::PortUsageType currentState;
        // statistics
        linkStatistics stats;

<%
        } else {// end if pushPacket
%>
    private:
<%
            for (Operation op : iface.getOperations()) {
                ArrayList<String> vectorList = new ArrayList<String>();
                for (int i = 0; i < op.getParams().size(); i++) {
                    String iteratorBase = _cppHelper.getBaseSequenceMapping(op.getParams().get(i).getCxxType());
                    if (iteratorBase.length() > 11) {
                        if (iteratorBase.substring(0, 11).equals("std::vector")) {
                            vectorList.add(op.getParams().get(i).getName());
                        }
                    }
                }
                for (int i = 0; i < vectorList.size(); i++) {
                    String iteratorBase = _cppHelper.getBaseSequenceMapping(op.getParams().get(i).getCxxType());
        %>
    <%=iteratorBase%> vector_<%=op.getName()%>_<%=i%>;
    
<%
                }
            } // end for Operations
        } // end else !pushPacket
        } // end else !BulkIO
%>

