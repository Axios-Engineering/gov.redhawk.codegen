<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.template.component.push"
imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.cplusplus.CppHelper
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.RedhawkIdeActivator
java.util.Arrays
java.util.List
mil.jpeojtrs.sca.prf.Simple
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"

class="ResourceSupportCppTemplate"
skeleton="../../generator.skeleton2"
%>
#include <iostream>
#include <fstream>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    EList<Simple> simpleList = softPkg.getPropertyFile().getProperties().getSimple();
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    EList<Uses> uses = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    CppHelper _cppHelper = new CppHelper();
    boolean hasPushPacketCall = false;
%>

#include "<%=PREFIX%>.h"

<%
    if ((uses.size() > 0) || (provides.size() > 0)) { 
%>
#include "port_impl.h"
<%
    }
%>
#include <uuid/uuid.h>


/*******************************************************************************************

	These are auto-generated support functions. You should never have to mess with these
     functions.

*******************************************************************************************/
<%
    if ((uses.size() > 0) || (provides.size() > 0)) { 
%>
CORBA::Object_ptr <%=PREFIX%>_i::getPort(const char* _id) throw (CORBA::SystemException, CF::PortSupplier::UnknownPort)
{

    std::map<std::string, Port_Provides_base_impl *>::iterator p_in = inPorts.find(std::string(_id));
    if (p_in != inPorts.end()) {

<%
        for (Provides pro : provides) {
            String entry = pro.getRepID();
            Interface intf = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true); 
            if (intf == null) {
                throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
            }
            String nameSpace = intf.getNameSpace();
            String interfaceName = intf.getName();
%>
        if (!strcmp(_id,"<%=pro.getProvidesName()%>")) {
            <%=nameSpace%>_<%=interfaceName%>_In_i *ptr = dynamic_cast<<%=nameSpace%>_<%=interfaceName%>_In_i *>(p_in->second);
            if (ptr) {
                return <%=nameSpace%>::<%=interfaceName%>::_duplicate(ptr->_this());
            }
        }
<%
        }
%>
    }

    std::map<std::string, CF::Port_var>::iterator p_out = outPorts_var.find(std::string(_id));
    if (p_out != outPorts_var.end()) {
        return CF::Port::_duplicate(p_out->second);
    }

    throw (CF::PortSupplier::UnknownPort());
}
<%
    } // end if has ports
%>

void <%=PREFIX%>_i::releaseObject() throw (CORBA::SystemException, CF::LifeCycle::ReleaseError)
{    // This function clears the component running condition so main shuts down everything

	// Temporarily keep the main thread loop from exiting (prevents premature object destruction)
    thread_exit_lock.lock();
	
    // deactivate ports
    releaseInPorts();
    releaseOutPorts();

    // Set the main thread condition to terminate
    component_alive = false;

	// Allow main processing thread to exit normally
    thread_exit_lock.unlock();

    // Provide main processing thread with signal in case it is currently waiting on incoming data
	data_in_signal->signal();
    
    // Raise main signal to destroy object (where component instance was initially created)
    component_running->signal();
}

void <%=PREFIX%>_i::configure(const CF::Properties& props) throw (CORBA::SystemException, CF::PropertySet::InvalidConfiguration, CF::PropertySet::PartialConfiguration)
{
    attribute_access.lock();
    PropertySet_impl::configure(props);
    
    // Configure properties here
    // TODO
    
    attribute_access.unlock();

    if (!thread_started) {
        thread_started = true;
    	omni_thread::start();
    }
}

<%
    if (hasPushPacketCall) {
%>
        bool compareSRI(BULKIO::StreamSRI &SRI_1, BULKIO::StreamSRI &SRI_2){
            if (SRI_1.hversion != SRI_2.hversion)
                return false;
            if (SRI_1.xstart != SRI_2.xstart)
                return false;
            if (SRI_1.xdelta != SRI_2.xdelta)
                return false;
            if (SRI_1.xunits != SRI_2.xunits)
                return false;
            if (SRI_1.subsize != SRI_2.subsize)
                return false;
            if (SRI_1.ystart != SRI_2.ystart)
                return false;
            if (SRI_1.ydelta != SRI_2.ydelta)
                return false;
            if (SRI_1.yunits != SRI_2.yunits)
                return false;
            if (SRI_1.mode != SRI_2.mode)
                return false;
            if (strcmp(SRI_1.streamID, SRI_2.streamID) != 0)
                return false;
            if (SRI_1.keywords.length() != SRI_2.keywords.length())
                return false;
            std::string action = "eq";
            for (unsigned int i=0; i<SRI_1.keywords.length(); i++) {
                if (strcmp(SRI_1.keywords[i].id, SRI_2.keywords[i].id)) {
                    return false;
                }
                if (!ossie::compare_anys(SRI_1.keywords[i].value, SRI_2.keywords[i].value, action)) {
                    return false;
                }
            }
            return true;
        }
        
<%
    }
%>

void <%=PREFIX%>_i::loadProperties()
{
<%
    for (Simple simple : simpleList) { 
%>
<%
        if (simple.getId() != null) { 
%>
    propSet["<%=simple.getName()%>"].id = "<%=simple.getId()%>";
<%
        }
        if (simple.getName() != null) {
%>
    propSet["<%=simple.getName()%>"].name = "<%=simple.getName()%>";
<%
        }
        if (simple.getType() != null) {
%>
    propSet["<%=simple.getName()%>"].type = <%=_cppHelper.convertType(simple.getType().getName())%>;
<%
        }
        if (simple.getMode() != null) {
%>
    propSet["<%=simple.getName()%>"].mode = "<%=simple.getMode()%>";
<%
        }
        if (simple.getUnits() != null) {
%>
    propSet["<%=simple.getName()%>"].units = "<%=simple.getUnits()%>";
<%
        }
        if (simple.getAction() != null) {
%>
    propSet["<%=simple.getName()%>"].action = "<%=simple.getAction().getType()%>";
<%
        }
        if (simple.getId() != null) {
%>
    propSet["<%=simple.getName()%>"].baseProperty.id = "<%=simple.getId()%>";
<%
        }
        if (simple.getValue() != null) { 
%>
    propSet["<%=simple.getName()%>"].baseProperty.value <<= <%
            if (simple.getType().toString().equals("string")) {
    %>"<%=simple.getValue()%>";<%
            }  else if (simple.getType().toString().equals("boolean")) { 
    %>CORBA::Any::from_boolean(<%=simple.getValue().toLowerCase()%>);<%
            }  else if (simple.getType().toString().equals("char")) { 
    %>CORBA::Any::from_char('<%=simple.getValue().toLowerCase()%>');<%
            }  else if (simple.getType().toString().equals("longlong")) { 
    %>(CORBA::LongLong)<%=simple.getValue()%>;<%
            } else { 
    %>(<%=simple.getType()%>)<%=simple.getValue()%>;
<% 
            }
        } 
        if (simple.getKind().size() > 0) { 
%>
    propSet["<%=simple.getName()%>"].kinds.resize(<%=simple.getKind().size()%>);
<%
        } 
        for (int i = 0; i < simple.getKind().size(); i++) { 
%>
    propSet["<%=simple.getName()%>"].kinds[<%=i%>] = "<%=simple.getKind().get(i).getType()%>";
<%
        }
    }
%>	
}
