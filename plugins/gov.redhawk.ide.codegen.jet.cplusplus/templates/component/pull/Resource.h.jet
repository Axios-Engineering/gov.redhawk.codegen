<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.template.component.pull"
imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.idl.Operation
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.preferences.RedhawkIdePreferenceConstants
gov.redhawk.ide.RedhawkIdeActivator
java.util.Arrays
java.util.HashSet
java.util.List
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"
class="PullResourceHTemplate"
skeleton="../../generator.skeleton2"
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    
    boolean hasPushPacketCall = false;
    boolean hasSddsPort = false;
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    HashSet<String> providesList = new HashSet<String>();
    for (Provides entry : provides) {
        String intName = entry.getRepID();
        providesList.add(intName);
        if (intName.contains("BULKIO/dataSDDS")) {
            hasSddsPort = true;
        }
    }
    for (String entry : providesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        for (Operation op : iface.getOperations()) {
            int numParams = op.getParams().size();
            if ("pushPacket".equals(op.getName()) && (numParams == 4)) {
                hasPushPacketCall = true;
                break;
            }
        }
        if (hasPushPacketCall) {
            break;
        }
    }
%>
#ifndef <%=PREFIX.toUpperCase()%>_IMPL_H
#define <%=PREFIX.toUpperCase()%>_IMPL_H

#include "<%=PREFIX%>_base.h"

class <%=PREFIX%>_i;

class <%=PREFIX%>_i : public <%=PREFIX%>_base
{
    ENABLE_LOGGING
    public:
        <% if (!templ.isDevice()) {%> 
        <%=PREFIX%>_i(const char *uuid, const char *label);
        <% } else { %>
        <%=PREFIX%>_i(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl);
        <%=PREFIX%>_i(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, char *compDev);
        <%=PREFIX%>_i(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, CF::Properties capacities);
        <%=PREFIX%>_i(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, CF::Properties capacities, char *compDev);
        <%}%>
        ~<%=PREFIX%>_i();
        int serviceFunction();
<%if (hasSddsPort) {%>
        std::string attach(const BULKIO::SDDSStreamDefinition& stream, const char* userid);
        void detach(const char* userid);
<%}%>
};

#endif
