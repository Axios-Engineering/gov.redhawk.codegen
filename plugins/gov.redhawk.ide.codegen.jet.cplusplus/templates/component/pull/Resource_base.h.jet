<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.template.component.pull"
imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.codegen.jet.cplusplus.CppProperties
gov.redhawk.ide.codegen.jet.cplusplus.ports.MessagingPortTemplate
gov.redhawk.ide.codegen.jet.cplusplus.ports.PropertyChangeEventPortTemplate
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation

java.util.ArrayList
java.util.Arrays
java.util.HashSet
java.util.List

mil.jpeojtrs.sca.prf.Struct
mil.jpeojtrs.sca.prf.StructSequence
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.spd.SoftPkg
mil.jpeojtrs.sca.scd.SupportsInterface
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation

org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"

class="PullResourceBaseHTemplate"
skeleton="../../generator.skeleton2"
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    List<CppProperties.Property> properties = CppProperties.getProperties(softPkg);
    EList<Uses> uses = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    String deviceType = "";
    String baseClass = "Resource_impl";
    boolean hasPorts = (uses.size() > 0) || (provides.size() > 0);
    boolean hasPushPacketCall = false;
    boolean aggregateDevice = false;

    // TODO: Refactor this long block of code (and other similar blocks) into one handy place that can just give you an enum
	final List<SupportsInterface> supportedInterfaces = softPkg.getDescriptor().getComponent().getComponentFeatures().getSupportsInterface();
    for (SupportsInterface inter : supportedInterfaces) {
        if (inter.getRepId().equals("IDL:CF/Device:1.0")) {
            deviceType = "";
            baseClass = "Device_impl";
            break;
        }
    }

    for (SupportsInterface inter : supportedInterfaces) {
        if (inter.getRepId().equals("IDL:CF/LoadableDevice:1.0")) {
            deviceType = "Loadable";
            baseClass = "LoadableDevice_impl";
            break;
        }
    }

    for (SupportsInterface inter : supportedInterfaces) {
        if (inter.getRepId().equals("IDL:CF/ExecutableDevice:1.0")) {
            deviceType = "Executable"; 
            baseClass = "ExecutableDevice_impl";
            break;
        }
    }
    
    for (SupportsInterface inter : supportedInterfaces) {
        if (inter.getRepId().equals("IDL:CF/AggregateDevice:1.0")) {
            aggregateDevice = true;
            
	        if ("Executable".equals(deviceType)) {
	            baseClass = "virtual POA_CF::AggregateExecutableDevice, public " + baseClass;
	        } else if ("Loadable".equals(deviceType)) {
	            baseClass = "virtual POA_CF::AggregateLoadableDevice, public " + baseClass;
	        } else {
	            baseClass = "virtual POA_CF::AggregatePlainDevice, public " + baseClass;
	        }
	        baseClass += ", public AggregateDevice_impl ";
	        break;
        }
   }
    
    HashSet<String> usesList = new HashSet<String>();
    boolean hasPropChangePort = false;
    for (Uses entry : uses) {
        String intName = entry.getRepID();
        if (PropertyChangeEventPortTemplate.EVENTCHANNEL_REPID.equals(intName) 
                && PropertyChangeEventPortTemplate.EVENTCHANNEL_NAME.equals(entry.getUsesName())) {
            hasPropChangePort = true;
        } else {
            usesList.add(intName);
        }
    }
    
    HashSet<String> providesList = new HashSet<String>();
    for (Provides entry : provides) {
        String intName = entry.getRepID();
        providesList.add(intName);
    }

    for (String entry : providesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        for (Operation op : iface.getOperations()) {
            if ("pushPacket".equals(op.getName())) {
                hasPushPacketCall = true;
                break;
            }
        }
    }
%>
#ifndef <%=PREFIX.toUpperCase()%>_IMPL_BASE_H
#define <%=PREFIX.toUpperCase()%>_IMPL_BASE_H

#include <boost/thread.hpp>
#include <ossie/Resource_impl.h>
<%if (aggregateDevice) {%>
#include "CF/AggregateDevices.h"
<%}%>
<%if (aggregateDevice) {%>
#include "ossie/AggregateDevice_impl.h"
<%}%>

<%if (templ.isDevice()) {%>
#include "ossie/<%=deviceType%>Device_impl.h"
<%}%>
<%if (hasPorts) {%>
#include "port_impl.h"
<%}%>
<%List<Struct> structProps = new ArrayList<Struct>();
    structProps.addAll(softPkg.getPropertyFile().getProperties().getStruct());
    for (StructSequence structSequence : softPkg.getPropertyFile().getProperties().getStructSequence()) {
        if (structSequence.getStruct() != null) {
            structProps.add(structSequence.getStruct());
        }
    }
    if (!structProps.isEmpty()) {%>
#include "struct_props.h"
<%}%>

#define NOOP 0
#define FINISH -1
#define NORMAL 1

class <%=PREFIX%>_base;

<%if (hasPushPacketCall) {%>
#include <ossie/prop_helpers.h>
<%}%>

template < typename TargetClass >
class ProcessThread
{
    public:
        ProcessThread(TargetClass *_target, float _delay) :
            target(_target)
        {
            _mythread = 0;
            _thread_running = false;
            _udelay = (__useconds_t)(_delay * 1000000);
        };

        // kick off the thread
        void start() {
            if (_mythread == 0) {
                _thread_running = true;
                _mythread = new boost::thread(&ProcessThread::run, this);
            }
        };

        // manage calls to target's service function
        void run() {
            int state = NORMAL;
            while (_thread_running and (state != FINISH)) {
                state = target->serviceFunction();
                if (state == NOOP) usleep(_udelay);
            }
        };

        // stop thread and wait for termination
        bool release(unsigned long secs = 0, unsigned long usecs = 0) {
            _thread_running = false;
            if (_mythread)  {
                if ((secs == 0) and (usecs == 0)){
                    _mythread->join();
                } else {
                    boost::system_time waitime= boost::get_system_time() + boost::posix_time::seconds(secs) +  boost::posix_time::microseconds(usecs) ;
                    if (!_mythread->timed_join(waitime)) {
                        return 0;
                    }
                }
                delete _mythread;
                _mythread = 0;
            }
    
            return 1;
        };

        virtual ~ProcessThread(){
            if (_mythread != 0) {
                release(0);
                _mythread = 0;
            }
        };

        void updateDelay(float _delay) { _udelay = (__useconds_t)(_delay * 1000000); };

    private:
        boost::thread *_mythread;
        bool _thread_running;
        TargetClass *target;
        __useconds_t _udelay;
        boost::condition_variable _end_of_run;
        boost::mutex _eor_mutex;
};

class <%=PREFIX%>_base : public <%=baseClass%>
{
<%

    for (String entry : providesList) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (iface == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        String nameSpace = iface.getNameSpace();
        String interfaceName = iface.getName();
%>
    friend class <%=nameSpace%>_<%=interfaceName%>_In_i;
<%
    }

    for (String entry : usesList) {
        Interface intf = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (intf == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        String nameSpace = intf.getNameSpace();
        String interfaceName = intf.getName();
%>
    friend class <%=nameSpace%>_<%=interfaceName%>_Out_i;
<%
    }
    if (hasPropChangePort) {
%>
    friend class PropertyChangeEventPort_i;
<%
    }
%>

    public:
        <% if (!templ.isDevice()) {%> 
        <%=PREFIX%>_base(const char *uuid, const char *label);
        <% } else { %>
        <%=PREFIX%>_base(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl);
        <%=PREFIX%>_base(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, char *compDev);
        <%=PREFIX%>_base(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, CF::Properties capacities);
        <%=PREFIX%>_base(char *devMgr_ior, char *id, char *lbl, char *sftwrPrfl, CF::Properties capacities, char *compDev);
        <%}%>

        void start() throw (CF::Resource::StartError, CORBA::SystemException);

        void stop() throw (CF::Resource::StopError, CORBA::SystemException);

<%
    if ((uses.size() > 0) || (provides.size() > 0)) {
%>
        CORBA::Object_ptr getPort(const char* _id) throw (CF::PortSupplier::UnknownPort, CORBA::SystemException);

<%
    }
%>
        void releaseObject() throw (CF::LifeCycle::ReleaseError, CORBA::SystemException);

        void initialize() throw (CF::LifeCycle::InitializeError, CORBA::SystemException);

        void loadProperties();

        virtual int serviceFunction() = 0;

<%if (hasPushPacketCall) {%>
        bool compareSRI(BULKIO::StreamSRI &SRI_1, BULKIO::StreamSRI &SRI_2){
            if (SRI_1.hversion != SRI_2.hversion)
                return false;
            if (SRI_1.xstart != SRI_2.xstart)
                return false;
            if (SRI_1.xdelta != SRI_2.xdelta)
                return false;
            if (SRI_1.xunits != SRI_2.xunits)
                return false;
            if (SRI_1.subsize != SRI_2.subsize)
                return false;
            if (SRI_1.ystart != SRI_2.ystart)
                return false;
            if (SRI_1.ydelta != SRI_2.ydelta)
                return false;
            if (SRI_1.yunits != SRI_2.yunits)
                return false;
            if (SRI_1.mode != SRI_2.mode)
                return false;
            if (strcmp(SRI_1.streamID, SRI_2.streamID) != 0)
                return false;
            if (SRI_1.keywords.length() != SRI_2.keywords.length())
                return false;
            std::string action = "eq";
            for (unsigned int i=0; i<SRI_1.keywords.length(); i++) {
                if (strcmp(SRI_1.keywords[i].id, SRI_2.keywords[i].id)) {
                    return false;
                }
                if (!ossie::compare_anys(SRI_1.keywords[i].value, SRI_2.keywords[i].value, action)) {
                    return false;
                }
            }
            if (SRI_1.blocking != SRI_2.blocking) {
                return false;
            }
            return true;
        }
        
<%}%>
    protected:
        ProcessThread<<%=PREFIX%>_base> *serviceThread; 
        boost::mutex serviceThreadLock;  
<%if (properties.size() > 0) { %>

        // Member variables exposed as properties
<%}%>
<%  for (CppProperties.Property prop : properties) {
%>
        <%=prop.getCppType()%> <%=prop.getCppName()%>;
<%
    }%>
<%if (hasPorts) { %>

        // Ports
<%}%>
<%
    for (Provides pro : provides) {
        String entry = pro.getRepID();
        Interface intf = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true);
        if (intf == null) { 
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        } 
        String nameSpace = intf.getNameSpace();
        String interfaceName = intf.getName();
        if (MessagingPortTemplate.MESSAGECHANNEL_REPID.equals(entry)) {
%>
        MessageConsumerPort *<%=pro.getProvidesName()%>;
<%
        } else {
%>
        <%=nameSpace%>_<%=interfaceName%>_In_i *<%=pro.getProvidesName()%>;
<%
		}
    }
    
    for (Uses use : uses) {
        String entry = use.getRepID();
        Interface intf = IdlUtil.getInstance().getInterface(search_paths, entry.split(":")[1], true); 
        if (intf == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry)); 
        }
        String nameSpace = intf.getNameSpace();
        String interfaceName = intf.getName();
        // Loop over provides ports to see if there is a matching interface and port name for the current uses port
        // If so, ignore the uses port
        // This is to support bi-directional ports
        boolean foundMatchingProvides = false;
        for (Provides pro : provides) {
            String entryProvides = pro.getRepID();
            Interface intfProvides = IdlUtil.getInstance().getInterface(search_paths, entryProvides.split(":")[1], true);
            if (intfProvides == null) { 
                throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entryProvides));
            } 
            String nameSpaceProvides = intfProvides.getNameSpace();
            String interfaceNameProvides = intfProvides.getName();
            if (entry.equals(entryProvides) && use.getUsesName().equals(pro.getProvidesName())) {
                foundMatchingProvides = true;
                break;
            }
        } // for (Provides pro : provides)
        if(foundMatchingProvides == false){
            if (PropertyChangeEventPortTemplate.EVENTCHANNEL_REPID.equals(entry) 
                    && PropertyChangeEventPortTemplate.EVENTCHANNEL_NAME.equals(use.getUsesName())) {
%>
        PropertyEventSupplier *<%=PropertyChangeEventPortTemplate.EVENTCHANNEL_NAME%>;
<%
            } else {
%>
        <%=nameSpace%>_<%=interfaceName%>_Out_i *<%=use.getUsesName()%>;
<%
            }
        } // if(foundMatchingProvides == false)
    } // for (Uses use : uses)
%>
    
    private:
        void construct();

};
#endif
