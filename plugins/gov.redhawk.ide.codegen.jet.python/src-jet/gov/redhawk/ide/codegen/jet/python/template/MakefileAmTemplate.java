/*******************************************************************************
 * This file is protected by Copyright. 
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under 
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
// BEGIN GENERATED CODE
package gov.redhawk.ide.codegen.jet.python.template;

import gov.redhawk.ide.codegen.ImplementationSettings;
import gov.redhawk.ide.codegen.Property;
import gov.redhawk.ide.codegen.jet.TemplateParameter;
import gov.redhawk.model.sca.util.ModelUtil;
import mil.jpeojtrs.sca.scd.SoftwareComponent;
import mil.jpeojtrs.sca.scd.ComponentType;
import mil.jpeojtrs.sca.spd.Implementation;
import mil.jpeojtrs.sca.spd.SoftPkg;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;

/**
 * @generated
 */
public class MakefileAmTemplate
{

  protected static String nl;
  public static synchronized MakefileAmTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    MakefileAmTemplate result = new MakefileAmTemplate();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "# vim: noet: softtabstop=0";
  protected final String TEXT_2 = NL;
  protected final String TEXT_3 = "Props.py: ";
  protected final String TEXT_4 = NL + "\t\t$(OSSIEHOME)/bin/prf2py.py ";
  protected final String TEXT_5 = " > ";
  protected final String TEXT_6 = "Props.py" + NL + "" + NL + "BUILT_SOURCES = ";
  protected final String TEXT_7 = "Props.py" + NL + "#CLEANFILES = ";
  protected final String TEXT_8 = "Props.py";
  protected final String TEXT_9 = NL + NL + "xmldir = $(prefix)/";
  protected final String TEXT_10 = "/";
  protected final String TEXT_11 = "/";
  protected final String TEXT_12 = "/" + NL + "dist_xml_DATA = ";
  protected final String TEXT_13 = " ";
  protected final String TEXT_14 = " ";
  protected final String TEXT_15 = NL;
  protected final String TEXT_16 = "dir = $(prefix)/";
  protected final String TEXT_17 = "/";
  protected final String TEXT_18 = "/";
  protected final String TEXT_19 = "/";
  protected final String TEXT_20 = "/" + NL + "" + NL + "# Sources are auto-included from a file generated by the REDHAWK IDE. You may" + NL + "# remove the following lines if you wish to manually control these options." + NL + "include $(srcdir)/Makefile.am.ide" + NL + "nobase_dist_";
  protected final String TEXT_21 = "_SCRIPTS = $(redhawk_SCRIPTS_auto)" + NL + "nobase_dist_";
  protected final String TEXT_22 = "_DATA = $(redhawk_DATA_auto)";
  protected final String TEXT_23 = NL;

  public String generate(Object argument) throws CoreException
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
    TemplateParameter template = (TemplateParameter) argument;
    ImplementationSettings implSettings = template.getImplSettings();
    IResource resource = ModelUtil.getResource(implSettings);
    Implementation impl = template.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String projectName = resource.getProject().getName();
    boolean newStyle = true;
    for (Property tempProp : implSettings.getProperties()) {
    	if ("use_old_style".equals(tempProp.getId())) {
    		if ("TRUE".equalsIgnoreCase(tempProp.getValue())) {
    			newStyle = false;
    			break;
    		}
    	}
    }
    
    String sdrSubDir = "dom";
    String subFolder = "components";

    final SoftwareComponent component = softPkg.getDescriptor().getComponent();
    final ComponentType scdComponentType = SoftwareComponent.Util.getWellKnownComponentType(component); 
    if (scdComponentType == ComponentType.DEVICE) {
    	sdrSubDir = "dev";
     	subFolder = "devices";
    } else if (scdComponentType == ComponentType.SERVICE) {
    	sdrSubDir = "dev";
     	subFolder = "services";
    }

    String [] split = implSettings.getOutputDir().split("/");
    String xmlLocation = "";
    for (String temp : split) {
    	if (temp.length() > 1) {
    		xmlLocation += "../";
    	}
    }

    for (Property tempProp : implSettings.getProperties()) {
	    if ("use_new_style".equals(tempProp.getId())) {
    		if ("TRUE".equals(tempProp.getValue())) {
	    		newStyle = true;
    			continue;
	    	}
	    }
    }

    stringBuffer.append(TEXT_1);
     if (!newStyle) { 
    stringBuffer.append(TEXT_2);
    stringBuffer.append(gov.redhawk.ide.codegen.util.CodegenFileHelper.safeGetImplementationName(impl, implSettings));
    stringBuffer.append(TEXT_3);
    stringBuffer.append(xmlLocation);
    stringBuffer.append(ModelUtil.getPrfFile(softPkg.getPropertyFile()));
    stringBuffer.append(TEXT_4);
    stringBuffer.append(xmlLocation);
    stringBuffer.append(ModelUtil.getPrfFile(softPkg.getPropertyFile()));
    stringBuffer.append(TEXT_5);
    stringBuffer.append(gov.redhawk.ide.codegen.util.CodegenFileHelper.safeGetImplementationName(impl, implSettings));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(gov.redhawk.ide.codegen.util.CodegenFileHelper.safeGetImplementationName(impl, implSettings));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(gov.redhawk.ide.codegen.util.CodegenFileHelper.safeGetImplementationName(impl, implSettings));
    stringBuffer.append(TEXT_8);
     } 
    stringBuffer.append(TEXT_9);
    stringBuffer.append(sdrSubDir);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(subFolder);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(projectName);
    stringBuffer.append(TEXT_12);
    
if (softPkg.getPropertyFile() != null) { 
    stringBuffer.append(xmlLocation);
    stringBuffer.append(ModelUtil.getPrfFileName(softPkg.getPropertyFile()) );
    stringBuffer.append(TEXT_13);
     
} 
     
if (softPkg != null) { 
    stringBuffer.append(xmlLocation);
    stringBuffer.append(ModelUtil.getScdFileName(softPkg));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(xmlLocation);
    stringBuffer.append(ModelUtil.getSpdFileName(softPkg));
     } 
    stringBuffer.append(TEXT_15);
    stringBuffer.append(sdrSubDir);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(sdrSubDir);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(subFolder);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(projectName);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(implSettings.getOutputDir());
    stringBuffer.append(TEXT_20);
    stringBuffer.append(sdrSubDir);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(sdrSubDir);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(TEXT_23);
    return stringBuffer.toString();
  }
}

// END GENERATED CODE