class Port<%=PortHelper.idlToCamelPortClass(tempProvide.getRepID())%>In_i(<%=PREFIX%>_base.Port<%=PortHelper.idlToCamelPortClass(tempProvide.getRepID())%>In):
    class linkStatistics:
        class statPoint:
            def __init__(self):
                self.elements = 0
                self.queueSize = 0.0
                self.secs = 0.0
                self.streamID = ""

        def __init__(self, port_ref):
            self.enabled = True
            self.historyWindow = 10
            self.receivedStatistics = []
            self.port_ref = port_ref
            self.receivedStatistics_idx = 0
            self.bitSize = 8
            for i in range(self.historyWindow):
                self.receivedStatistics.append(self.statPoint())

        def setBitSize(self, _bitSize):
            self.bitSize = _bitSize

        def setEnabled(self, enableStats):
            self.enabled = enableStats

        def update(self, elementsReceived, queueSize, streamID):
            if not self.enabled:
                return

            self.receivedStatistics[self.receivedStatistics_idx].elements = elementsReceived
            self.receivedStatistics[self.receivedStatistics_idx].queueSize = queueSize
            self.receivedStatistics[self.receivedStatistics_idx].secs = time.time()
            self.receivedStatistics[self.receivedStatistics_idx].streamID = streamID
            self.receivedStatistics_idx += 1
            self.receivedStatistics_idx = self.receivedStatistics_idx%self.historyWindow

        def retrieve(self):
            if not self.enabled:
                return None

            self.runningStats = BULKIO.PortStatistics(portName=self.port_ref.name, averageQueueDepth=-1, elementsPerSecond=-1, bitsPerSecond=-1, callsPerSecond=-1, streamIDs=[], timeSinceLastCall=-1, keywords=[])

            listPtr = (self.receivedStatistics_idx + 1) % self.historyWindow    # don't count the first set of data, since we're looking at change in time rather than absolute time
            frontTime = self.receivedStatistics[(self.receivedStatistics_idx - 1) % self.historyWindow].secs
            backTime = self.receivedStatistics[self.receivedStatistics_idx].secs
            totalData = 0.0
            queueSize = 0.0
            streamIDs = []
            while (listPtr != self.receivedStatistics_idx):
                totalData += self.receivedStatistics[listPtr].elements
                queueSize += self.receivedStatistics[listPtr].queueSize
                streamIDptr = 0
                foundstreamID = False
                while (streamIDptr != len(streamIDs)):
                    if (streamIDs[streamIDptr] == self.receivedStatistics[listPtr].streamID):
                        foundstreamID = True
                        break
                    streamIDptr += 1
                if (not foundstreamID):
                    streamIDs.append(self.receivedStatistics[listPtr].streamID)
                listPtr += 1
                listPtr = listPtr%self.historyWindow

            receivedSize = len(self.receivedStatistics)
            currentTime = time.time()
            totalTime = currentTime - backTime
            if totalTime == 0:
                totalTime = 1e6
            self.runningStats.bitsPerSecond = (totalData * self.bitSize) / totalTime
            self.runningStats.elementsPerSecond = totalData / totalTime
            self.runningStats.averageQueueDepth = queueSize / receivedSize
            self.runningStats.callsPerSecond = float((receivedSize - 1)) / totalTime
            self.runningStats.streamIDs = streamIDs
            self.runningStats.timeSinceLastCall = currentTime - frontTime
            return self.runningStats

    def __init__(self, parent, name, maxsize):
        self.parent = parent
        self.name = name
        self.sri = None
        self.queue = Queue.Queue()        
        self.maxQueueDepth = maxsize
        self.port_lock = threading.Lock()
        self._attachedStreams = {} # key=attach_id, value = (streamDef, userid) 
        self.stats = self.linkStatistics(self)
        self.sriDict = {} # key=streamID, value=(StreamSRI, PrecisionUTCTime)
        try:
            self._attach_cb = getattr(parent, "attach")
            if not callable(self._attach_cb):
                self._attach_cb = None
        except AttributeError:
            self._attach_cb = None
        try:
            self._detach_cb = getattr(parent, "detach")
            if not callable(self._detach_cb):
                self._attach_cb = None
        except AttributeError:
            self._detach_db = None

    def setBitSize(self, bitSize):
        self.stats.setBitSize(bitSize)

    def enableStats(self, enabled):
        self.stats.setEnabled(enabled)
        
    def updateStats(self, elementsReceived, queueSize, streamID):
        self.port_lock.acquire()
        try:
            self.stats.update(elementsReceived, queueSize, streamID)
        finally:
            self.port_lock.release()

    def _get_statistics(self):
        self.port_lock.acquire()
        try:
            recStat = self.stats.retrieve()
        finally:
            self.port_lock.release()
        return recStat

    def _get_state(self):
        if len(self._attachedStreams.values()) == 0:
            return BULKIO.IDLE
        # default behavior is to limit to one connection
        elif len(self._attachedStreams.values()) == 1:
            return BULKIO.BUSY
        else:
            return BULKIO.ACTIVE

    def _get_attachedSRIs(self):
        sris = []
        self.port_lock.acquire()
        try:
            for entry in self.sriDict:
                sris.append(copy.deepcopy(self.sriDict[entry]))
        finally:
            self.port_lock.release()
        return sris

    def _get_usageState(self):
        if len(self._attachedStreams.values()) == 0:
            return <%=nameSpace%>.<%=interfaceName%>.IDLE
        # default behavior is to limit to one connection
        elif len(self._attachedStreams.values()) == 1:
            return <%=nameSpace%>.<%=interfaceName%>.BUSY
        else:
            return <%=nameSpace%>.<%=interfaceName%>.ACTIVE

    def _get_attachedStreams(self):
        return [x[0] for x in self._attachedStreams.values()]

    def _get_attachmentIds(self):
        return self._attachedStreams.keys()

    def attach(self, streamDef, userid):
        #self._log.debug("attach(%s)", streamDef)
        if self._get_usageState() == <%=nameSpace%>.<%=interfaceName%>.BUSY:
            raise <%=nameSpace%>.<%=interfaceName%>.AttachError("No capacity")

        #
        # Allocate capacities here if applicable
        #

        # The attachment succeeded so generate a attachId
        attachId = None
        try:
            if self._attach_cb != None:
                attachId = self._attach_cb(streamDef, userid)
        except Exception, e:
            raise BULKIO.dataSDDS.AttachError(str(e))
        
        if attachId == None:
            attachId = str(uuid.uuid4())

        self._attachedStreams[attachId] = (streamDef, userid)

        return attachId

    def detach(self, attachId):
        if not self._attachedStreams.has_key(attachId):
            #self._log.debug("Stream %s not attached %s", attachId, self._attachedStreams.keys())
            raise <%=nameSpace%>.<%=interfaceName%>.DetachError("Stream %s not attached" % attachId)

        attachedStreamDef, refcnf = self._attachedStreams[attachId]

        #
        # Deallocate capacity here if applicable
        #

        try:
            if self._detach_cb != None:
                self._detach_cb(attachId)
        except Exception, e:
            raise BULKIO.dataSDDS.DetachError(str(e))

        # Remove the attachment from our list
        del self._attachedStreams[attachId]

    def getStreamDefinition(self, attachId):
        try:
            return self._attachedStreams[attachId][0]
        except KeyError:
            raise <%=nameSpace%>.<%=interfaceName%>.StreamInputError("Stream %s not attached" % attachId)

    def getUser(self, attachId):
        try:
            return self._attachedStreams[attachId][1]
        except KeyError:
            raise <%=nameSpace%>.<%=interfaceName%>.StreamInputError("Stream %s not attached" % attachId)

    def pushSRI(self, H, T):
        self.port_lock.acquire()
        try:
            self.sriDict[H.streamID] = (copy.deepcopy(H), copy.deepcopy(T))
        finally:
            self.port_lock.release()
