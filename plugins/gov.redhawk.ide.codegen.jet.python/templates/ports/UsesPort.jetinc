<%
    if ("BULKIO".equals(nameSpace)) {
%>
<%@ include file="../ports/BULKIOUsesPort.jetinc"%>
<%
    } else {
%>

class Port<%=PortHelper.idlToCamelPortClass(tempUse.getRepID())%>Out_i(<%=PREFIX%>_base.Port<%=PortHelper.idlToCamelPortClass(tempUse.getRepID())%>Out):
    def __init__(self, parent, name):
        self.parent = parent
        self.name = name
        self.outConnections = {}
        self.port_lock = threading.Lock()

    def connectPort(self, connection, connectionId):
        self.port_lock.acquire()
        try:
            port = connection._narrow(<%=nameSpace%>.<%=interfaceName%>)
            self.outConnections[str(connectionId)] = port
        finally:
            self.port_lock.release()

    def disconnectPort(self, connectionId):
        self.port_lock.acquire()
        try:
            self.outConnections.pop(str(connectionId), None)
        finally:
            self.port_lock.release()
        
<%
        // Operations (function calls)
        for (Operation op : intf.getOperations()) {
            boolean returnType = PortHelper.hasReturn(op);
%>
    def <%=op.getName()%>(self<%
    for (Param p : op.getParams()){ if (!"out".equals(p.getDirection())) { %>, <%=p.getName()%><%} }%>):
<%
            if (returnType) {
                if (op.getReturnType().contains("string")) { 
%>
        retVal = ""
<%
                } else if (PortHelper.getNumReturns(op) == 1) {
%>
        retVal = None
<%
                } else {
%>
        retVal = []
<%
                }
            }
%>
        self.port_lock.acquire()

        try:    
            try:
                for connId, port in self.outConnections.items():
                    if port != None:
                    <%
            if (returnType) {
%>retVal =<%
            }
%> port.<%=op.getName()%>(<%
            boolean first_param = true;
            for (Param p : op.getParams()) {
                if (!"out".equals(p.getDirection())) {
                	if (first_param) { 
                    	first_param=false;
                	} else {
%>, <%
                	}
%><%=p.getName()%><%
				}
            }
%>)
            except Exception:
                self.parent._log.exception("The call to <%=op.getName()%> failed on port %s connection %s instance %s", self.name, connId, port)
        finally:
            self.port_lock.release()

<% 
            if (returnType) {
%>
        return retVal
 
<%
            }
        } /* end for operations */

        for (Attribute op : intf.getAttributes()) {
%>
    def _get_<%=op.getName()%>(self):
<%
            if (op.getReturnType().contains("string")) { 
%>
        retVal = ""
<%
            } else {
%>
        retVal = None
<%
            }
%>
        self.port_lock.acquire()

        try:    
            try:
                for connId, port in self.outConnections.items():
                    if port != None:
                        retVal = port._get_<%=op.getName()%>()
            except Exception:
                self.parent._log.exception("The call to _get_<%=op.getName()%> failed on port %s connection %s instance %s", self.name, connId, port)
        finally:
            self.port_lock.release()

        return retVal
 
<%
            if (!op.isReadonly()) {
%>
    def _set_<%=op.getName()%>(self, data):
        self.port_lock.acquire()

        try:    
            try:
                for connId, port in self.outConnections.items():
                    if port != None:
                        port._set_<%=op.getName()%>(data)
            except Exception:
                self.parent._log.exception("The call to _set_<%=op.getName()%> failed on port %s connection %s instance %s", self.name, connId, port)
        finally:
            self.port_lock.release()

<%
            }
        } /* end for attributes */
    } /* end SDDS test */
%>