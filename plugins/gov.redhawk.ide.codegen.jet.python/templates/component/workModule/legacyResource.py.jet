<%@ jet package="gov.redhawk.ide.codegen.jet.python.template.component.workmodule" imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.Property
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.python.PythonJetGeneratorPlugin
gov.redhawk.ide.codegen.python.utils.PortHelper
gov.redhawk.ide.idl.Attribute
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation
gov.redhawk.ide.idl.Param
java.util.Arrays
java.util.HashSet
java.util.List
mil.jpeojtrs.sca.prf.Properties
mil.jpeojtrs.sca.prf.Simple
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"
class="LegacyResourcePythonTemplate"
skeleton="../../generator.skeleton2" 
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softpkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softpkg, implSettings);
    EList<Uses> uses = softpkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    EList<Provides> provides = softpkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    Properties properties = softpkg.getPropertyFile().getProperties();
    Boolean havePorts = false;
    Boolean workModule = false;
    HashSet<String> nsSet = new HashSet<String>();
    if (uses.size() > 0) {
        havePorts = true;
        for (Uses tempUse : uses) {
           nsSet.add(tempUse.getRepID().split(":")[1].split("/")[0]);
        }
    }
    if (provides.size() > 0) {
        havePorts = true;
        for (Provides tempProvide : provides) {
           nsSet.add(tempProvide.getRepID().split(":")[1].split("/")[0]);
        }
    } 

    for (String file : templ.getSourceFiles()) {
        if ("WorkModule.py".equals(file)) {
            workModule = true;
            break;
        }
    }
    for (Property tempProp : implSettings.getProperties()) {
        if ("use_old_style".equals(tempProp.getId())) {
            if (Boolean.parseBoolean(tempProp.getValue())) {
                workModule = true;
                break;
            }
        }
    }
%>
#!/usr/bin/env python <%    if (implSettings.getGeneratorId().contains("XMPY")) {%>xmpy<%    }    %>
#
from ossie.cf import CF, CF__POA
from ossie.resource import Resource, start_component
from omniORB import any
<% 
    if (havePorts) { 
        for (String ns : nsSet) {
            String lowerNS = ns.toLowerCase();
%>
from <%=lowerNS%>.<%=lowerNS%>Interfaces import <%=ns%>, <%=ns%>__POA <%
        }
    } 
%>
import os, time, signal, copy
import logging
<% 
    if (havePorts) { 
%>
import threading 
<%
    }
    if (workModule) { 
%>
import WorkModule
<% 
    }
%>


from <%= PREFIX %>Props import PROPERTIES

<% 
    // Ports 
    if (havePorts) {
        if (provides.size() > 0) {
%>

'''provides port(s)'''
<%
        }
%>
<% 
        // Provides Ports
        for (Provides tempProvide : provides) {
            String intName = tempProvide.getRepID();
            Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
            if (iface == null) {
            	throw new CoreException(new Status(IStatus.ERROR, PythonJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
            }
            String nameSpace = iface.getNameSpace();
            String interfaceName = iface.getName();
%>

class <%=nameSpace%>_<%=interfaceName%>_in_i(<%=nameSpace%>__POA.<%=interfaceName%>):
    def __init__(self, parent, name):
        self.parent = parent
        self.name = name
<% 
            // Provides Operations
            for (Operation op : iface.getOperations()) {
                int numParams = op.getParams().size();
%>

    def <%=op.getName()%>(self<%for (Param p : op.getParams()){%>, <%=p.getName()%><%}%>):
<%        
                if ("pushPacket".equals(op.getName()) && workModule) {        
%>        
        # Queue the incoming data to be later worked on in the Workmodule
        # TODO:
        self.parent.work_mod.queueData(<%=op.getParams().get(0).getName()%>, <%=numParams == 4 ? "T" : "None"%>, <%=numParams == 4 ? "EOS" : "None"%>, <%=numParams == 4 ? "streamID" : "None"%>)
<%
                }  else { // End if statement pushPacket conditional                
%>
        # TODO:
<%
                } // End else statement pushPacket
%>
        pass
<%
            } // end Provides Operations
            for (Attribute op : iface.getAttributes()) {
%>

    def _get_<%=op.getName()%>(self):
        # TODO:
        pass
<%
                if (!op.isReadonly()) {
%>

    def _set_<%=op.getName()%>(self, data):
        # TODO:
        pass

<%
                } // end if !readonly
            } // end Provides Attributes
        } // end for Provides Ports
        
        // Uses Ports
        if (uses.size() > 0) {
%>

'''uses port(s)'''
<%
        }
        for (Uses tempUse : uses) {
            String intName = tempUse.getRepID(); 
            Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
            boolean bulkioData = false;
            if (iface == null) {
              	throw new CoreException(new Status(IStatus.ERROR, PythonJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
         	}
         	System.out.println("attrs: " + iface.getAttributes());
            String nameSpace = iface.getNameSpace();
            String interfaceName = iface.getName();
            // Check to see if this is a BULKIO data port
            boolean pushSRIFlag = false;
            boolean pushPacketFlag = false;
            if ("BULKIO".equals(nameSpace)){
                for (Operation op : iface.getOperations()){
                    if ("pushSRI".equals(op.getName())){
                        pushSRIFlag = true;
                    }
                    if ("pushPacket".equals(op.getName())){
                        pushPacketFlag = true;
                    }
                }     
                bulkioData = (pushSRIFlag && pushPacketFlag);
            }
%>

class <%=nameSpace%>_<%=interfaceName%>_out_i(CF__POA.Port):
    def __init__(self, parent, name):
        self.parent = parent
        self.name = name
        self.outPorts = {}
<%
            if (bulkioData){
%>
        self.refreshSRI = False
        self.defaultStreamSRI = BULKIO.StreamSRI(1, 0.0, 0.001, 1, 200, 0.0, 0.001, 1, 1, "sampleStream", [])
<%
            }
%>
        self.port_lock = threading.Lock()

    def connectPort(self, connection, connectionId):
        self.port_lock.acquire()
        port = connection._narrow(<%=nameSpace%>__POA.<%=interfaceName%>)
        self.outPorts[str(connectionId)] = port
<%
            if (bulkioData) {
%>
        self.refreshSRI = True
<%
            }
%>
        self.port_lock.release()

    def disconnectPort(self, connectionId):
        self.port_lock.acquire()
        if self.outPorts.has_key(str(connectionId)):
            self.outPorts.pop(str(connectionId), None)
        else:
            self.port_lock.release()
            return
        self.port_lock.release()
<%
            // Operations (function calls)
            for (Operation op : iface.getOperations()) {
                boolean returnType = PortHelper.hasReturn(op);
%>
    def <%=op.getName()%>(self<%
    for (Param p : op.getParams()){%>, <%=p.getName()%><%}%>):
<%
                if (returnType) {
                    if (op.getReturnType().contains("string")) { 
%>
        retVal = ""
<%
                    } else if (PortHelper.getNumReturns(op) == 1) {
%>
        retVal = None
<%
                    } else {
%>
        retVal = []
<%
                    }
                }
                if (bulkioData && "pushSRI".equals(op.getName())) {
%>
        self.defaultStreamSRI = <%
                    boolean first_param = true;
                    for (Param p : op.getParams()){
                        if (first_param) { 
                            first_param=false;
                        }
%><%=p.getName()%><%
                    } 
                } else if (bulkioData && "pushPacket".equals(op.getName())) {
%>
        if self.refreshSRI:
            self.pushSRI(self.defaultStreamSRI)
<%
                } // end if pushPacket
%>
        self.port_lock.acquire()
        try:
            for port in self.outPorts:
                if self.outPorts[port] != None:
                <%
                if (returnType) {
%>retVal =<%
                }
%> self.outPorts[port].<%=op.getName()%>(<%
                boolean first_param = true;
                for (Param p : op.getParams()) {
                    if (first_param) { 
                        first_param=false;
                    } else {
%>, <%
                    }
%><%=p.getName()%><%
                }
%>)
        except:
            self.parent._log.exception("The call to <%=op.getName()%> failed")
        self.port_lock.release()
<% 
                if (returnType) {
%>
        return retVal 
<%
                }
            } /* end for operations */
            for (Attribute op : iface.getAttributes()) {
%>
    def _get_<%=op.getName()%>(self):
<%
                if (op.getReturnType().contains("string")) { 
%>
        retVal = ""
<%
                } else {
%>
        retVal = None
<%
                }
%>
        self.port_lock.acquire()

        try:    
            try:
                for connId, port in self.outPorts.items():
                    if port != None:
                        retVal = port.<%=op.getName()%>()
            except Exception:
                self.parent._log.exception("The call to <%=op.getName()%> failed on port %s connection %s instance %s", self.name, connId, port)
        finally:
            self.port_lock.release()

        return retVal
 
<%
                if (!op.isReadonly()) {
%>
    def _set_<%=op.getName()%>(self, data):
        self.port_lock.acquire()

        try:    
            try:
                for connId, port in self.outPorts.items():
                    if port != None:
                        port.<%=op.getName()%>(data)
            except Exception:
                self.parent._log.exception("The call to <%=op.getName()%> failed on port %s connection %s instance %s", self.name, connId, port)
        finally:
            self.port_lock.release()

<%
                }
            } /* end for attributes */
        } // end for Uses Ports
    } // end if Ports 
%>

class <%=PREFIX%>_i(CF__POA.Resource, Resource):
<% 
    if (softpkg.getDescription() != null) { 
%>
    """<%=softpkg.getDescription()%>"""
<% 
    } else {
%>
    """<DESCRIPTION GOES HERE>"""
<% 
    }
%>

    # The signal to send and the number of seconds (max) to wait
    # for the process to actually exit before trying the next signals.
    # None means wait until the process dies (which we have to do to
    # avoid creating zombie processes
    STOP_SIGNALS = ((signal.SIGINT, 1), (signal.SIGTERM, 5), (signal.SIGKILL, None))
    def __init__(self, identifier, execparams):
        loggerName = execparams['NAME_BINDING'].replace('/', '.')
        Resource.__init__(self, identifier, execparams, propertydefs=PROPERTIES, loggerName=loggerName)
<%
    for (Simple simple : properties.getSimple()) {
        if (simple.getKind().contains("execparam")) { 
%>
        self._props["execparams"] = " ".join(["%s %s" % x for x in execparams.items()])
<%
        }
    }
%>
        self._pid = None

<%
    if ((provides.size() > 0) || (uses.size() > 0)) {
%>
        self.ports = {}
<%
    }
    if (havePorts && (provides.size() > 0)) {
%>

        '''provides'''
<% 
        for (Provides tempProvide : provides) { 
            Interface iface = IdlUtil.getInstance().getInterface(search_paths, tempProvide.getRepID().split(":")[1], true);
            if (iface == null) {
            	throw new CoreException(new Status(IStatus.ERROR, PythonJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + tempProvide.getRepID()));
            }
            String nameSpace = iface.getNameSpace();
            String interfaceName = iface.getName();
 %>
        portRef = <%=nameSpace%>_<%=interfaceName%>_in_i(self, "<%=tempProvide.getProvidesName()%>")
        self.ports['<%=tempProvide.getProvidesName()%>'] = portRef
<% 
        }
    } // end if have provides ports
    
    if (havePorts && (uses.size() > 0)) {
%>    

        '''uses'''
<% 
        for (Uses tempUse : uses) { 
            Interface iface = IdlUtil.getInstance().getInterface(search_paths, tempUse.getRepID().split(":")[1], true);
            if (iface == null) {
            	throw new CoreException(new Status(IStatus.ERROR, PythonJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + tempUse.getRepID()));
        	}
            String nameSpace = iface.getNameSpace();
            String interfaceName = iface.getName();
%>
        portRef = <%=nameSpace%>_<%=interfaceName%>_out_i(self, "<%=tempUse.getUsesName()%>")
        self.ports['<%=tempUse.getUsesName()%>'] = portRef

<%
        }
    } // end if have uses ports
    
    if (workModule) { 
%>
        self.work_mod = WorkModule.WorkClass(self)
<%
    }
%>

    def getPort(self, name):
        if self.ports.has_key(name):
            return self.ports[str(name)]._this()
        raise CF.PortSupplier.UnknownPort()
        
<%
    if (workModule) {
%>
    def releaseObject(self):
        self.work_mod.Release()
<%
    }
%>

    def start(self):
        # This is a framework-level start call. This function is called only if this component
        #    happens to be the assembly controller (or the assembly controller is written such that
        #    it calls this component's start function
        # The vast majority of components won't have their start function called
        # TODO:
        pass
        
    def stop(self):
        # This is a framework-level stop call. This function is called only if this component
        #    happens to be the assembly controller (or the assembly controller is written such that
        #    it calls this component's stop function
        # The vast majority of components won't have their stop function called
        # TODO:
        pass
    
if __name__ == '__main__':
    logging.getLogger().setLevel(logging.DEBUG)
    start_component(<%=PREFIX%>_i)