<%@ jet package="gov.redhawk.ide.codegen.jet.python.template.component.skeleton" imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.jet.TemplateParameter"
class="ResourcePythonTemplate"
skeleton="../../generator.skeleton" 
%>
<%
	TemplateParameter templ = (TemplateParameter) argument;
	mil.jpeojtrs.sca.spd.Implementation impl = templ.getImpl();
	ImplementationSettings implSettings = templ.getImplSettings();
	mil.jpeojtrs.sca.spd.SoftPkg softPkg = (mil.jpeojtrs.sca.spd.SoftPkg) impl.eContainer();
	String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    
%>
#!/usr/bin/env python 
#
from ossie.cf import CF, CF__POA #@UnusedImport
import omniORB.COS.CosNaming as CosNaming # Directly import CosNaming so PyDev doesn't get confused
from omniORB import CORBA, URI
import sys, signal, copy


class <%=PREFIX%>(CF__POA.Resource):
    def __init__(self, execparams):
        self.execparams = execparams
        self._identifier = execparams["COMPONENT_IDENTIFIER"]

    def _get_identifier(self):
        """The readonly identifier attribute shall contain the unique
        identifier for a Resource instance.
        """
        return self._identifier

    def initialize(self):
        """
        The purpose of the initialize operation is to provide a mechanism to
        set a component to a known initial state. For example, data structures
        may be set to initial values, memory may be allocated, hardware devices
        may be configured to some state, etc.  

        The initialize operation shall raise an CF.LifeCycle.InitializeError
        exception when an initialization error occurs.

        This function is the first call made by the framework after
        constructing the component.  
        """
        pass # TODO: add your implementation here

    def start(self):
        """The start operation is provided to command the resource implementing
        this interface to start internal processing.

        The start operation shall raise the CF.Resource.StartError exception if an error
        occurs while starting the resource.

        IMPORTANT: The start() operation will not be called unless your component
        is the waveform assembly controller *or* the assembly controller explicitly
        tells your component to start.
        """
        pass # TODO: add your implementation here

    def stop(self):
        """The stop operation is provided to command the resource implementing
        this interface to stop internal processing.

        The stop operation shall not inhibit subsequent configure, query, and start operations.

        The stop operation shall raise the CF.Resource.StopError exception if
        an error occurs while stopping the resource.
        
        IMPORTANT: The stop() operation will not be called unless your component
        is the waveform assembly controller *or* the assembly controller explicitly
        tells your component to start.
        """

        pass # TODO: add your implementation here

    def releaseObject(self):
        """The purpose of the releaseObject operation is to provide a means by
        which an instantiated component may be torn down.

        The releaseObject operation shall raise a CF.LifeCycle.ReleaseError
        exception when a release error occurs.
        """

        pass # TODO: add your implementation here

    def getPort(self, name):
        """The getPort operation provides a mechanism to obtain a specific
        consumer or producer port. A port supplier may contain zero-to-many
        consumer and producer port components. The exact number is specified in
        the components software profile SCD (section 3.1.3.5). Multiple input
        and/or output ports provide flexibility for port suppliers that manage
        varying priority levels and categories of incoming and outgoing
        messages, provide multi-threaded message handling, or other special
        message processing.

        The getPort operation shall return the CORBA object reference that is
        associated with the input port name.

        The getPort operation shall raise an UnknownPort exception if the port
        name is invalid.
        """

        raise CF.PortSupplier.UnknownPort() # TODO: add your implementation here

    def runTest(self, properties, testid):
        """The runTest operation allows components to be black box tested.
        This allows built-in tests (BITs) to be implemented which provide a
        means to isolate faults (both software and hardware) within the system.

        The runTest operation shall raise the CF.TestableObject.UnknownTest
        exception when there is no underlying test implementation that is
        associated with the input testId given.  
        
        The runTest operation shall raise the CF.UnknownProperties exception
        when the input parameter testValues contains any CF DataTypes that are
        not known by the components test implementation or any values that are
        out of range for the requested test. The exception parameter
        invalidProperties shall contain the invalid testValues properties id(s)
        that are not known by the component or the value(s) are out of range.
        """

        raise CF.TestableObject.UnknownTest("unknown test: %s" % str(testid)) # TODO: add your implementation here

    def configure(self, configProperties):
        """The configure operation allows id/value pair configuration
        properties to be assigned to components implementing this interface.

        The configure operation shall raise a
        CF.PropertySet.PartialConfiguration exception when some configuration
        properties were successfully set and some configuration properties were
        not successfully set.  
        
        The configure operation shall raise an
        CF.PropertySet.InvalidConfiguration exception when a configuration
        error occurs and no configuration properties were successfully set.
        """
        pass # TODO: add your implementation here

    def query(self, configProperties):
        """The query operation shall return all component properties when the
        inout parameter configProperties is zero size. The query operation
        shall return only those id/value pairs specified in the
        configProperties parameter if the parameter is not zero size. Valid
        properties for the query operation shall be all configure properties
        (simple properties whose kind elements kindtype attribute is
        configure) whose mode attribute is readwrite or readonly and any
        allocation properties with an action value of "external" as referenced
        in the component's SPD.

        The query operation shall raise the CF.UnknownProperties exception when
        one or more properties being requested are not known by the component.
        """
        return [] # TODO: add your implementation here
        
if __name__ == '__main__':
    # This code is boilerplate startup code for a component
    def __exit_handler(signum, frame):
        raise SystemExit

    # Turn the SCA execparams into a dictionary
    args = copy.copy(sys.argv[1:])
    execparams = {}
    while len(args) > 0:
        try:
            paramid = args.pop(0)
            paramvalue = args.pop(0)
            execparams[paramid] = paramvalue
        except IndexError:
            pass

    # Verify that the required parameters were provided
    for reqparam in ("NAMING_CONTEXT_IOR", "COMPONENT_IDENTIFIER", "NAME_BINDING"):
        if not execparams.has_key(reqparam):
            sys.exit(-1)


    orb = None
    signal.signal(signal.SIGINT, __exit_handler)
    signal.signal(signal.SIGTERM, __exit_handler)
    try:
        try:
            # ORB initialization
            orb = CORBA.ORB_init()
            obj_poa = orb.resolve_initial_references("RootPOA")
            poaManager = obj_poa._get_the_POAManager()
            poaManager.activate()

            # Create the component servant object
            component_Obj = <%=PREFIX%>(execparams)
            component_Var = component_Obj._this()

            # Bind it to the naming context
            rootContext = orb.string_to_object(execparams['NAMING_CONTEXT_IOR'])
            if rootContext == None:
                raise SystemExit, "Failed to lookup naming context"
            rootContext = rootContext._narrow(CosNaming.NamingContext)
            name = URI.stringToName(execparams['NAME_BINDING'])
            rootContext.rebind(name, component_Var)

            # Enter the ORB run loop
            orb.run()
        except SystemExit:
            pass
        except KeyboardInterrupt:
            pass
        except:
            sys.exit(-1)
    finally:
        if orb:
            orb.destroy()