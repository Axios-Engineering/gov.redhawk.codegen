<%@ jet package="gov.redhawk.ide.codegen.jet.python.template.component.minimal" imports="
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.jet.TemplateParameter
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.Platform
org.eclipse.core.runtime.IProduct
gov.redhawk.model.sca.util.ModelUtil
java.util.Date"
class="ResourcePythonTemplate"
skeleton="../../generator.skeleton" 
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Date date = new Date(System.currentTimeMillis());
    Implementation impl = templ.getImpl();
    mil.jpeojtrs.sca.spd.SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    
%>
#!/usr/bin/env python 
#
# AUTO-GENERATED
<%@ include file="../../utils/header.jetinc"%>
 
from ossie.cf import CF, CF__POA #@UnusedImport
from ossie.resource import start_component
from <%=PREFIX%>_base import <%=PREFIX%>_base

class <%=PREFIX%>(<%=PREFIX%>_base):

    def initialize(self):
        """
        The purpose of the initialize operation is to provide a mechanism to
        set a component to a known initial state. For example, data structures
        may be set to initial values, memory may be allocated, hardware devices
        may be configured to some state, etc.  

        The initialize operation shall raise an CF.LifeCycle.InitializeError
        exception when an initialization error occurs.

        This function is the first call made by the framework after
        constructing the component.  
        """
        <%=PREFIX%>_base.initialize(self)  # DO NOT REMOVE THIS LINE

        # TODO: add your implementation here

    def start(self):
        """The start operation is provided to command the resource implementing
        this interface to start internal processing.

        The start operation shall raise the CF.Resource.StartError exception if an error
        occurs while starting the resource.

        IMPORTANT: The start() operation will not be called unless your component
        is the waveform assembly controller *or* the assembly controller explicitly
        tells your component to start.
        """

        pass # TODO: add your implementation here

    def stop(self):
        """The stop operation is provided to command the resource implementing
        this interface to stop internal processing.

        The stop operation shall not inhibit subsequent configure, query, and start operations.

        The stop operation shall raise the CF.Resource.StopError exception if
        an error occurs while stopping the resource.

        IMPORTANT: The stop() operation will not be called unless your component
        is the waveform assembly controller *or* the assembly controller explicitly
        tells your component to start.
        """

        pass # TODO: add your implementation here

    def releaseObject(self):
        """The purpose of the releaseObject operation is to provide a means by
        which an instantiated component may be torn down.

        The releaseObject operation shall raise a CF.LifeCycle.ReleaseError
        exception when a release error occurs.
        """

        # TODO: add your implementation here

        <%=PREFIX%>_base.releaseObject(self)  # DO NOT REMOVE THIS LINE

    def getPort(self, name):
        """The getPort operation provides a mechanism to obtain a specific
        consumer or producer port. A port supplier may contain zero-to-many
        consumer and producer port components. The exact number is specified in
        the components software profile SCD (section 3.1.3.5). Multiple input
        and/or output ports provide flexibility for port suppliers that manage
        varying priority levels and categories of incoming and outgoing
        messages, provide multi-threaded message handling, or other special
        message processing.

        The getPort operation shall return the CORBA object reference that is
        associated with the input port name.

        The getPort operation shall raise an UnknownPort exception if the port
        name is invalid.
        """

        return <%=PREFIX%>_base.getPort(self, name)  # DO NOT REMOVE THIS LINE

    def runTest(self, properties, testid):
        """The runTest operation allows components to be black box tested.
        This allows built-in tests (BITs) to be implemented which provide a
        means to isolate faults (both software and hardware) within the system.

        The runTest operation shall raise the CF.TestableObject.UnknownTest
        exception when there is no underlying test implementation that is
        associated with the input testId given.  

        The runTest operation shall raise the CF.UnknownProperties exception
        when the input parameter testValues contains any CF DataTypes that are
        not known by the components test implementation or any values that are
        out of range for the requested test. The exception parameter
        invalidProperties shall contain the invalid testValues properties id(s)
        that are not known by the component or the value(s) are out of range.
        """

        raise CF.TestableObject.UnknownTest("unknown test: %s" % str(testid)) # TODO: add your implementation here

if __name__ == '__main__':
    start_component(<%=PREFIX%>)
