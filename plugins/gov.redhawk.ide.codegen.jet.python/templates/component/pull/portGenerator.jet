<%@ jet package="gov.redhawk.ide.codegen.jet.python.template.component.pull"
imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.Property
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.python.PythonJetGeneratorPlugin
gov.redhawk.ide.codegen.python.utils.PortHelper
gov.redhawk.ide.idl.Attribute
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation
gov.redhawk.ide.idl.Param
gov.redhawk.ide.preferences.RedhawkIdePreferenceConstants
java.util.ArrayList
java.util.Collections
java.util.List
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"
class="PortGeneratorTemplate"
skeleton="../../generator.skeleton2"%>
<% 
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    List<IPath> search_paths = templ.getSearchPaths();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    EList<Uses> uses = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    Uses usePort = null;
    Provides proPort  = null;
    if (!templ.isProvidesPort()) {
        for (Uses u : uses) {
            if (u.getRepID().equals(templ.getPortRepId())) {
                usePort  = u;
                break;
            }
        }
    } else {
        for (Provides p : provides) {
            if (p.getRepID().equals(templ.getPortRepId())) {
                proPort  = p;
                break;
            }
        }
    }
    boolean havePorts = (usePort != null) || (proPort != null);
    boolean generateGetters = false;
    boolean autoStart = false;
    boolean isResource = !softPkg.getDescriptor().getComponent().getComponentType().contains(RedhawkIdePreferenceConstants.DEVICE.toLowerCase());

    List<String> nsList = new ArrayList<String>();
    PortHelper portHelper = new PortHelper();

    if (templ.isGenSupport()) {
        if (usePort != null) {
            String[] repParts = usePort.getRepID().split(":")[1].split("/");
            String ns = repParts[repParts.length - 2];
            if (!nsList.contains(ns)) {
                nsList.add(ns);
            }
        }

        if (proPort != null) {
            String[] repParts = proPort.getRepID().split(":")[1].split("/");
            String ns = repParts[repParts.length - 2];
            if (!nsList.contains(ns)) {
                nsList.add(ns);
            }
        }

        Collections.sort(nsList);
%>
<%@ include file="../../utils/portImports.jetinc"%>
<%
    } else {
%>
<%@ include file="genProperties.jetinc"%>
<%
    }
    if (templ.isGenClassDef()) {
        if (proPort != null) {
            Provides provide = proPort;
%>
        # '<%=provide.getRepID().split(":")[1]%>' port
        class Port<%=PortHelper.idlToCamelPortClass(provide.getRepID())%>In(<%=PortHelper.idlToClassName(provide.getRepID())%>):
            """This class is a port template for the <%=provide.getProvidesName()%> port and
            should not be instantiated nor modified.
            
            The expectation is that the specific port implementation will extend 
            from this class instead of the base CORBA class <%=PortHelper.idlToClassName(provide.getRepID())%>.
            """
            pass
<%
        }

        if (usePort != null) {
            Uses use = usePort;
%>

        # '<%=use.getRepID().split(":")[1]%>' port
        class Port<%=PortHelper.idlToCamelPortClass(use.getRepID())%>Out(<% if (usePort.getRepID().contains("BULKIO")) {%>BULKIO__POA.UsesPortStatisticsProvider<% } else { %>CF__POA.Port<% } %>):
            """This class is a port template for the <%=use.getUsesName()%> port and
            should not be instantiated nor modified.
            
            The expectation is that the specific port implementation will extend 
            from this class instead of the base CORBA class CF__POA.Port.
            """
            pass
<%
        } // end if usePort
    } // end if isGenClassDef
    if (templ.isGenClassImpl()) {
        if (proPort != null) {
            Provides tempProvide = proPort;
            String intName = tempProvide.getRepID();
            Interface intf = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
            boolean bulkioData = false;
            if (intf == null) {
            	throw new CoreException(new Status(IStatus.ERROR, PythonJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
            }
            String nameSpace = intf.getNameSpace();
            String interfaceName = intf.getName();
            if ("BULKIO".equalsIgnoreCase(nameSpace)) {
                bulkioData = true;
            }
%>
<%@ include file="../../ports/ProvidesPort.jetinc"%>
<%
        } // end if Provides Ports
        
        if (usePort != null) {
            Uses tempUse = usePort;
            String intName = tempUse.getRepID();
            Interface intf = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
            boolean bulkioData = false;
            if (intf == null) {
            	throw new CoreException(new Status(IStatus.ERROR, PythonJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
            }
            String nameSpace = intf.getNameSpace();
            String interfaceName = intf.getName();
            // Check to see if this is a BULKIO data port
            boolean pushSRIFlag = false;
            boolean pushPacketFlag = false;
            if ("BULKIO".equals(nameSpace)) {
                for (Operation op : intf.getOperations()) {
                    if ("pushSRI".equals(op.getName())) {
                        pushSRIFlag = true;
                    } else if ("pushPacket".equals(op.getName())) {
                        pushPacketFlag = true;
                    }
                }
            }        
            bulkioData = (pushSRIFlag && pushPacketFlag);
%>
<%@ include file="../../ports/UsesPort.jetinc"%> 
<% 
        } // end if usePort
    } // end if isGenClassImpl
%>