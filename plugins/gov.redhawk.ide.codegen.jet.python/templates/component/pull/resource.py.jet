<%@ jet package="gov.redhawk.ide.codegen.jet.python.template.component.pull" imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.preferences.RedhawkIdePreferenceConstants
gov.redhawk.ide.codegen.jet.TemplateParameter
java.util.HashSet
java.util.Date
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.Platform
org.eclipse.emf.common.util.EList
org.eclipse.core.runtime.IProduct
gov.redhawk.model.sca.util.ModelUtil"
class="ResourcePythonTemplate"
skeleton="../../generator.skeleton" 
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    Date date = new Date(System.currentTimeMillis());
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    EList<Uses> uses = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    boolean isResource = true;
    boolean hasSddsPort = false;
    String OSSIENAME = "Component";
    HashSet<String> nsSet = new HashSet<String>();
    
    if (softPkg.getDescriptor().getComponent().getComponentType().contains(RedhawkIdePreferenceConstants.DEVICE.toLowerCase())) {
        isResource = false;
        OSSIENAME = "Device";
    }
    
    if (uses.size() > 0) {
        for (Uses tempUse : uses) {
		    final String[] ints = tempUse.getRepID().split(":")[1].split("/");
            nsSet.add(ints[ints.length - 2]);
        }
    }
    if (provides.size() > 0) {
        for (Provides tempProvide : provides) {
            String rep = tempProvide.getRepID();
            if (rep.contains("BULKIO/dataSDDS")) {
                hasSddsPort = true;
            }
		    final String[] ints = rep.split(":")[1].split("/");
            nsSet.add(ints[ints.length - 2]);
        }
    } 
%>
#!/usr/bin/env python <%    if (implSettings.getGeneratorId().contains("XMPY")) {%>xmpy<% }%>
#
# AUTO-GENERATED
<%@ include file="../../utils/header.jetinc"%>
<% if (isResource) { %>
from ossie.resource import Resource, start_component
<% } else { %>
from ossie.device import start_device
<% } %>
import logging
<% if (hasSddsPort) { %>
from ossie.utils import uuid
<% } %>

from <%= PREFIX %>_base import * 

class <%=PREFIX%>_i(<%=PREFIX%>_base):
<% 
    if (softPkg.getDescription() != null) { 
%>
    """<%=softPkg.getDescription()%>"""
<% 
    } else {
%>
    """<DESCRIPTION GOES HERE>"""
<% 
    }
%>
    def initialize(self):
        """
        This is called by the framework immediately after your component registers with the NameService.
        
        In general, you should add customization here and not in the __init__ constructor.  If you have 
        a custom port implementation you can override the specific implementation here with a statement
        similar to the following:
          self.some_port = MyPortImplementation()
        """
        <%=PREFIX%>_base.initialize(self)
        # TODO add customization here.
        
<% if (!isResource) { %>
    def updateUsageState(self):
        """
        This is called automatically after allocateCapacity or deallocateCapacity are called.
        Your implementation should determine the current state of the device:
           self._usageState = CF.Device.IDLE   # not in use
           self._usageState = CF.Device.ACTIVE # in use, with capacity remaining for allocation
           self._usageState = CF.Device.BUSY   # in use, with no capacity remaining for allocation
        """
        return NOOP

<% } %>

    def process(self):
        """
        Basic functionality:
        
            The process method should process a single "chunk" of data and then return. This method
            will be called from the processing thread again, and again, and again until it returns
            FINISH or stop() is called on the component.  If no work is performed, then return NOOP.
            
        StreamSRI:
            To create a StreamSRI object, use the following code (this generates a normalized SRI that does not flush the queue when full):
                self.sri = BULKIO.StreamSRI(1, 0.0, 0.0, BULKIO.UNITS_TIME, 0, 0.0, 0.0, BULKIO.UNITS_NONE, 0, self.stream_id, True, [])

        PrecisionUTCTime:
            To create a PrecisionUTCTime object, use the following code:
                tmp_time = time.time()
                wsec = math.modf(tmp_time)[1]
                fsec = math.modf(tmp_time)[0]
                tstamp = BULKIO.PrecisionUTCTime(BULKIO.TCM_CPU, BULKIO.TCS_VALID, 0, wsec, fsec)
  
        Ports:

            Each port instance is accessed through members of the following form: self.port_<PORT NAME>
            
            Data is obtained in the process function through the getPacket call (BULKIO only) on a
            provides port member instance. The getPacket function call is non-blocking - if no data
            is available, it will return immediately with all values == None.
            
            To send data, call the appropriate function in the port directly. In the case of BULKIO,
            convenience functions have been added in the port classes that aid in output.
            
            Interactions with non-BULKIO ports are left up to the component developer's discretion.
            
        Properties:
        
            Properties are accessed directly as member variables. If the property name is baudRate,
            then accessing it (for reading or writing) is achieved in the following way: self.baudRate.
            
        Example:
        
            # This example assumes that the component has two ports:
            #   - A provides (input) port of type BULKIO.dataShort called dataShort_in
            #   - A uses (output) port of type BULKIO.dataFloat called dataFloat_out
            # The mapping between the port and the class if found in the component
            # base class.
            # This example also makes use of the following Properties:
            #   - A float value called amplitude
            #   - A boolean called increaseAmplitude
            
            data, T, EOS, streamID, sri, sriChanged, inputQueueFlushed = self.port_dataShort_in.getPacket()
            
            if data == None:
                return NOOP
                
            outData = range(len(data))
            for i in range(len(data)):
                if self.increaseAmplitude:
                    outData[i] = float(data[i]) * self.amplitude
                else:
                    outData[i] = float(data[i])
                
            # NOTE: You must make at least one valid pushSRI call
            if sriChanged:
                self.port_dataFloat_out.pushSRI(sri);

            self.port_dataFloat_out.pushPacket(outData, T, EOS, streamID)
            return NORMAL
            
        """

        # TODO fill in your code here
        self._log.debug("process() example log message")
        return NOOP
        
  
if __name__ == '__main__':
    logging.getLogger().setLevel(logging.WARN)
    logging.debug("Starting <%=OSSIENAME%>")
<% if (isResource) { %>
    start_component(<%=PREFIX%>_i)
<% } else { %>
    start_device(<%=PREFIX%>_i)
<% } %>
