<%@ jet package="gov.redhawk.ide.codegen.jet.python.template" imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.jet.TemplateParameter
java.util.Collections
java.util.regex.Matcher
java.util.regex.Pattern
java.util.List
java.util.HashMap
java.util.Map
mil.jpeojtrs.sca.scd.Interface
mil.jpeojtrs.sca.scd.Interfaces
mil.jpeojtrs.sca.scd.ScdPackage
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
mil.jpeojtrs.sca.spd.SpdPackage
mil.jpeojtrs.sca.util.ScaEcoreUtils
org.eclipse.emf.ecore.EStructuralFeature"
class="ConfigureAcTemplate"
skeleton="../generator.skeleton"
%>
<% 
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softpkg = (SoftPkg) impl.eContainer();
    
    // Determine softpkg version, set to 1.0.0 if none exists
    String version = "1.0.0";
    String softpkgVersion = null;
    if (softpkg != null) {
        softpkgVersion = softpkg.getVersion();
    }  
    if (softpkgVersion != null && !softpkgVersion.equals("")) {
        version = softpkgVersion;
    }

    // Determine what interfaces we require
    Map<String, String> ifaceNameAndVer = new HashMap<String, String>();
    List<Interface> interfaces = Collections.emptyList();
    if (softpkg != null) {
    	EStructuralFeature [] path = new EStructuralFeature [] {
    			SpdPackage.Literals.SOFT_PKG__DESCRIPTOR,
    			SpdPackage.Literals.DESCRIPTOR__COMPONENT,
    			ScdPackage.Literals.SOFTWARE_COMPONENT__INTERFACES
    	};
    	Interfaces interfacesList = ScaEcoreUtils.getFeature(softpkg, path);
    	if (interfacesList != null) {
    		interfaces = interfacesList.getInterface();
    	}
    } 
    Pattern idlPattern = Pattern.compile("^IDL:(\\w+)/");
    for (Interface iface : interfaces) {
        Matcher match = idlPattern.matcher(iface.getRepid());
        if (match.find()) {
            String interfaceNamespace = match.group(1);
            if ("BULKIO".equals(interfaceNamespace)) {
                ifaceNameAndVer.put("bulkio", " >= 1.8");
            } else if ("REDHAWK".equals(interfaceNamespace)) {
                ifaceNameAndVer.put("redhawk", " >= 1.2.0");
            } else if (! "CF".equals(interfaceNamespace)) {
                ifaceNameAndVer.put(interfaceNamespace.toLowerCase(), "");
            }
        }
    }
%>

AC_INIT(<%=gov.redhawk.ide.codegen.util.CodegenFileHelper.safeGetImplementationName(impl, implSettings)%>, <%=version%>)
AM_INIT_AUTOMAKE(nostdinc)

AC_PROG_INSTALL

AC_CORBA_ORB
OSSIE_CHECK_OSSIE
OSSIE_SDRROOT_AS_PREFIX
AM_PATH_PYTHON([2.3])

PKG_CHECK_MODULES([OSSIE], [ossie >= 1.8])
AC_CHECK_PYMODULE(ossie, [], [AC_MSG_ERROR([the python ossie module is required])])
PKG_CHECK_MODULES([OMNIORB], [omniORB4 >= 4.0.0])
AC_CHECK_PYMODULE(omniORB, [], [AC_MSG_ERROR([the python omniORB module is required])])

<%
    for (String interfaceNamespace : ifaceNameAndVer.keySet()) {
		if (interfaceNamespace.equals("extendedevent")) {  // do not add a module (extendedevent is distributed as a standard part of REDHAWK)
		    continue;
		}
%>
PKG_CHECK_MODULES(<%=interfaceNamespace%>Interfaces, <%=interfaceNamespace%>Interfaces<%=ifaceNameAndVer.get(interfaceNamespace)%>)
<%
        if (interfaceNamespace.equals("bulkio")) { %>
AC_CHECK_PYMODULE(bulkio.bulkioInterfaces, [], [AC_MSG_ERROR([the python bulkio.bulkioInterfaces module is required])])
<%
        } else if (interfaceNamespace.equals("redhawk")) { %>
AC_CHECK_PYMODULE(redhawk.redhawkInterfaces, [], [AC_MSG_ERROR([the python redhawk.redhawkInterfaces module is required])])
<%
        } else { %>
AC_CHECK_PYMODULE(redhawk.<%=interfaceNamespace%>Interfaces, [], [AC_MSG_ERROR([the python redhawk.<%=interfaceNamespace%>Interfaces module is required])])
<%
        } %>
<%
    }
%>

AC_CONFIG_FILES(Makefile)

AC_OUTPUT
