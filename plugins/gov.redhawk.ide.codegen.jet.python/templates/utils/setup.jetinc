<%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    List<IPath> search_paths = templ.getSearchPaths();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    Properties properties = softPkg.getPropertyFile().getProperties();
	String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    String deviceType = softPkg.getDescriptor().getComponent().getComponentType();
    EList<Uses> uses = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    HashSet<String> usesReps = new HashSet<String>();
    HashSet<String> providesReps = new HashSet<String>();
    Uses usePort = null;
    Provides proPort  = null;
    boolean havePorts = false;
    boolean generateGetters = false;
    boolean autoStart = false;
    boolean aggregateDevice = false;
    boolean execDevice = false;
    boolean loadableDevice = false;
    boolean isResource = true;
    boolean includePropertyChange = false;
    String OSSIENAME = "Resource";
    List<String> nsList = new ArrayList<String>();
    PortHelper portHelper = new PortHelper();
    TemplateParameter portTempl = new TemplateParameter(impl, implSettings, search_paths);

    if (softPkg.getDescriptor().getComponent().getComponentType().contains(RedhawkIdePreferenceConstants.DEVICE.toLowerCase())) {
        isResource = false;
        OSSIENAME = "Device";
    }

    for (mil.jpeojtrs.sca.scd.Interface inter : softPkg.getDescriptor().getComponent().getInterfaces().getInterface()) {
        if (inter.getName().contains(RedhawkIdePreferenceConstants.DEVICE)) {
            deviceType = "";
            break;
        }
    }

    for (mil.jpeojtrs.sca.scd.Interface inter : softPkg.getDescriptor().getComponent().getInterfaces().getInterface()) {
        if (inter.getName().contains(RedhawkIdePreferenceConstants.LOADABLE_DEVICE)) {
            deviceType = "Loadable"; 
            loadableDevice = true;
            OSSIENAME = "LoadableDevice";
            break;
        }
    }

    for (mil.jpeojtrs.sca.scd.Interface inter : softPkg.getDescriptor().getComponent().getInterfaces().getInterface()) {
        if (inter.getName().contains(RedhawkIdePreferenceConstants.EXECUTABLE_DEVICE)) {
            deviceType = "Executable"; 
            execDevice = true;
            OSSIENAME = "ExecutableDevice";
            break;
        }
    }

    for (mil.jpeojtrs.sca.scd.Interface inter : softPkg.getDescriptor().getComponent().getInterfaces().getInterface()) {
        if (inter.getName().contains(RedhawkIdePreferenceConstants.AGGREGATE_DEVICE)) {
            aggregateDevice = true;
            break;
        }
    }

    if (uses.size() > 0) {
        havePorts = true;
        for (Uses tempUse : uses) {
            if (PropertyChangeEventPortTemplate.EVENTCHANNEL_REPID.equals(tempUse.getRepID()) 
                    && PropertyChangeEventPortTemplate.EVENTCHANNEL_NAME.equals(tempUse.getUsesName())) {
                includePropertyChange = true;
                continue;
            }
            usesReps.add(tempUse.getRepID());
            String[] repParts = tempUse.getRepID().split(":")[1].split("/");
            String ns = repParts[repParts.length - 2];
            if (!nsList.contains(ns)) {
                nsList.add(ns);
            }
        }
    }
    if (provides.size() > 0) {
        havePorts = true;
        for (Provides tempProvide : provides) {
            providesReps.add(tempProvide.getRepID());
            String[] repParts = tempProvide.getRepID().split(":")[1].split("/");
            String ns = repParts[repParts.length - 2];
            if (!nsList.contains(ns)) {
                nsList.add(ns);
            }
        }
    }

    boolean includePorts = havePorts || includePropertyChange;
    Collections.sort(nsList);

    HashMap<String, IScaPortCodegenTemplate> portMap = new HashMap<String, IScaPortCodegenTemplate>();
    for (PortRepToGeneratorMap p : implSettings.getPortGenerators()) {
        IPortTemplateDesc template = CodegenUtil.getPortTemplate(p.getGenerator(), null);
        if (template != null) {
               portMap.put(p.getRepId(), template.getTemplate());
        }
    }
%>