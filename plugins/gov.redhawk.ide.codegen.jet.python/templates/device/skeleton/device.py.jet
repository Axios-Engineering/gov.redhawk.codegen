<%@ jet package="gov.redhawk.ide.codegen.jet.python.template.device.skeleton" imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.jet.TemplateParameter"
class="DevicePythonTemplate"
skeleton="../../generator.skeleton" 
%>
<%
	TemplateParameter templ = (TemplateParameter) argument;
	mil.jpeojtrs.sca.spd.Implementation impl = templ.getImpl();
	ImplementationSettings implSettings = templ.getImplSettings();
	mil.jpeojtrs.sca.spd.SoftPkg softPkg = (mil.jpeojtrs.sca.spd.SoftPkg) impl.eContainer();
	String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
%>
#!/usr/bin/env python
from ossie.cf import CF, CF__POA
from ossie.device import Device, start_device
import logging

class <%=PREFIX%>(CF__POA.Device, Device):
    def __init__(self, devmgr, uuid, label, softwareProfile, compositeDevice, execparams):
        Device.__init__(self, devmgr, uuid, label, softwareProfile, compositeDevice, execparams, PROPERTIES)    

    ###########################################
    # CF::LifeCycle
    ###########################################
    def initialize(self):
        # This function is called by the framework during construction of the waveform
        # it is called before configure() is called, so whatever values you set in the xml properties file
        # won't be available when this is called. I wouldn't have done it in this order, but this
        # is what the spec call for
        # TODO:
        pass
    
    def releaseObject(self):
        # This is the part of the code where you will put in the logic that will appropriately cleanup
        # your component.  It is appropriate to do Memory Cleanup here since
        # CORBA doesn't like any cleaning up done in the Destructor.
        # TODO:
        pass

    ###########################################
    # CF::PropertySet
    ###########################################
    def query(self, configProperties):
        # Framework level call that allows a Component to reveal the details of it's properties to interested parties.  You will
        # need to take in the request, find the appropriate property and return that value to the one who queried.
        # TODO:
        pass
    
    def configure(self, configProperties):
        # Configure is called when a Component is asked to change/set a property that has already been previously defined.
        # Here you will put in the logic that will take care of dealing with the newly requested property, which in turn
        # will allow your Components to be overridden at runtime.
        # TODO:
        pass
    
    ###########################################
    # CF::TestableObject
    ###########################################
    def runTest(self, properties, testid):
        # Allows for the ability to perform stand alone testing of an SCA Component - useful for built in test (BIT) operations.
        # This function will need to run the test specified by the TestID, along with the values provided by testValues.
        # TODO:
        pass
       
    ###########################################
    # CF::PortSupplier
    ###########################################
    def getPort(self, name):
        # This function will return an object reference for the named port which in turn will be used to establish a connection
        # between two separate ports possible.
        # TODO:
        return None
    
###########################################                    
# program execution
###########################################
if __name__ == "__main__":
    logging.getLogger().setLevel(logging.WARN)
    logging.debug("Starting Device")
    start_device(<%=PREFIX%>)