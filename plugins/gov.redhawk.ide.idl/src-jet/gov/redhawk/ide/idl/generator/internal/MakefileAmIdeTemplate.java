/*******************************************************************************
 * This file is protected by Copyright. 
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under 
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
// BEGIN GENERATED CODE
package gov.redhawk.ide.idl.generator.internal;

import java.util.List;
import gov.redhawk.ide.idl.generator.newidl.GeneratorArgs;

/**
 * @generated
 */
public class MakefileAmIdeTemplate
{

  protected static String nl;
  public static synchronized MakefileAmIdeTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    MakefileAmIdeTemplate result = new MakefileAmIdeTemplate();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "redhawk_IDL_MODULE_auto := ";
  protected final String TEXT_2 = NL + NL + "# This file is regularly auto-generated by the REDHAWK IDE. Do not modify!" + NL + "" + NL + "# This is a list of all IDL files in the root directory of the project" + NL + "redhawk_IDL_FILES_auto =";
  protected final String TEXT_3 = NL + "redhawk_IDL_FILES_auto += ";
  protected final String TEXT_4 = NL + NL + "redhawk_IDL_SOURCES_auto =";
  protected final String TEXT_5 = NL + "redhawk_IDL_SOURCES_auto += src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/";
  protected final String TEXT_6 = "SK.cpp" + NL + "redhawk_IDL_SOURCES_auto += src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/";
  protected final String TEXT_7 = "DynSK.cpp" + NL + "redhawk_IDL_SOURCES_auto += src/cpp/$(LIBRARY_NAME)/$(IDL_MODULE)/";
  protected final String TEXT_8 = ".h";

    /**
    * {@inheritDoc}
    */

    public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
	GeneratorArgs args = (GeneratorArgs) argument;
	List<String> idlFiles = args.getIdlFiles();
	String moduleName = args.getInterfaceName();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(moduleName.toUpperCase());
    stringBuffer.append(TEXT_2);
     for (String idlFile : idlFiles) { 
    stringBuffer.append(TEXT_3);
    stringBuffer.append(idlFile);
     } 
    stringBuffer.append(TEXT_4);
     for (String idlFile : idlFiles) {
    String fileName = idlFile.substring(0, idlFile.lastIndexOf(".")); 

    stringBuffer.append(TEXT_5);
    stringBuffer.append(fileName);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(fileName);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(fileName);
    stringBuffer.append(TEXT_8);
     } 
    return stringBuffer.toString();
  }
} 