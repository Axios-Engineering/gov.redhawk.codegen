<%@ jet package="gov.redhawk.ide.codegen.jet.java.template.component.skeleton"
imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.jet.java.JavaJetGeneratorPlugin
gov.redhawk.ide.codegen.jet.java.JavaTemplateParameter
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.idl.IdlJavaUtil
java.util.Arrays
java.util.HashMap
java.util.HashSet
java.util.List
mil.jpeojtrs.sca.prf.Simple
mil.jpeojtrs.sca.scd.Ports
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.jacorb.idl.Interface
org.jacorb.idl.Operation
org.eclipse.emf.common.util.EList
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status"
class="ResourceJavaTemplate"
skeleton="../../generator.skeleton2" 
%>
<%  
    JavaTemplateParameter template = (JavaTemplateParameter) argument;
    ImplementationSettings implSettings = template.getImplSettings();
    Implementation impl = template.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    Ports ports = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts();
    EList<Simple> simpleList = softPkg.getPropertyFile().getProperties().getSimple();
    EList<Provides> provides = ports.getProvides();
    EList<Uses> uses = ports.getUses();
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    String pkg = template.getPackage();
    boolean includedProp = false;
    
    // Get a list of all the repId's for the uses ports
    HashSet<String> usesList = new HashSet<String>();
    for (Uses entry : uses) {
        String intName = entry.getRepID().toString();
        usesList.add(intName);
    }
    
    // Get a list of all the repId's for the provides ports
    HashSet<String> providesList = new HashSet<String>();
    for (Provides entry : provides) {
        String intName = entry.getRepID().toString();
        providesList.add(intName);
    }
%>
package <%=pkg%>;

<% 
    if (simpleList.size() > 0) {
%>
import java.util.Vector;
<%
    }
    if (providesList.size() > 0) {
%>
import java.util.concurrent.ArrayBlockingQueue;
<%
    }
%>

import CF.DataType;
import CF.PropertiesHolder;
import CF.Resource;
import CF.ResourceHelper;
import CF.UnknownProperties;
import CF.LifeCyclePackage.InitializeError;
import CF.LifeCyclePackage.ReleaseError;
import CF.PropertySetPackage.InvalidConfiguration;
import CF.PropertySetPackage.PartialConfiguration;
import CF.ResourcePackage.StartError;
import CF.ResourcePackage.StopError;

import org.omg.CORBA.UserException;
import org.omg.CosNaming.NameComponent;

import org.ossie.component.Resource_impl;

<% 
    if (simpleList.size() > 0) {
       if (!includedProp) {
           includedProp = true;
%>
import org.ossie.PropertyContainer;
<%
       }
    }
    if ((provides.size() > 0) || (uses.size() > 0)) {
%>
import CF.PortPOA;
<%
    }
    // Check the contents of the provides list vs. the uses list
    // and remove all duplicates
    HashSet<String> commonList = new HashSet<String>();
    for (String entry : usesList) {
        if (providesList.contains(entry)) {
            commonList.add(entry);
            continue;
        }
    }
    
    // and remove all duplicates
    providesList.removeAll(commonList);
    usesList.removeAll(commonList);

    HashMap<String, Interface> intMap = new HashMap<String, Interface>();
    for (String entry : commonList) {
        String rep = entry.split(":")[1];
        Interface intf = IdlJavaUtil.getInstance().getInterface(search_paths, rep, true);
        if (intf == null) {
        	throw new CoreException(new Status(IStatus.ERROR, JavaJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
        }
        intMap.put(entry, intf);
    }
    for (String entry : usesList) {
        String rep = entry.split(":")[1];
        Interface intf = IdlJavaUtil.getInstance().getInterface(search_paths, rep, true);
        if (intf == null) {
        	throw new CoreException(new Status(IStatus.ERROR, JavaJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
    	}
        intMap.put(entry, intf);
    }
    for (String entry : providesList) {
        String rep = entry.split(":")[1];
        Interface intf = IdlJavaUtil.getInstance().getInterface(search_paths, rep, true);
        if (intf == null) {
        	throw new CoreException(new Status(IStatus.ERROR, JavaJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + entry));
    	}
        intMap.put(entry, intf);
    }
%>

/**
 * This is the component code. This file contains all the access points
 * you need to use to be able to access all input and output ports,
 * respond to incoming data, and perform general component housekeeping
 */
public class <%=PREFIX%> extends Resource_impl implements Runnable {

<%
    int inArrayCount = 0;
    for (Provides p : provides) {
        Interface iface = intMap.get(p.getRepID());
        for (Operation op : IdlJavaUtil.getOperations(iface)) {
            if ("pushPacket".equals(IdlJavaUtil.getOpName(op))) {
                String type = IdlJavaUtil.getParams(op)[0].paramTypeSpec.typeName();
%>
    private ArrayBlockingQueue<<%=type%>> inputQueue<%=inArrayCount++%>;
<%
            }
        }
    } // End for (provides)
%>
    
    public <%=PREFIX%>(String nsIor, String compId, String binding) {
        super(nsIor, compId, true, 196608, 2000000);
        
        System.out.println("Starting everything");
        
        // component_alive flag is turned to false to terminate the main processing thread
        this.setComponentAlive(true);
    }


	/*******************************************************************************************
	
	  Framework-level functions
	    
	  These functions are generally called by the framework to perform housekeeping.
	
	*******************************************************************************************/
	public void start() throws StartError {
	    // This is a framework-level start call. This function is called only if this component
	    //    happens to be the assembly controller (or the assembly controller is written such that
	    //    it calls this component's start function
	    // The vast majority of components won't have their start function called
		
		// TODO
    }

	public void stop() throws StopError {
	    // This is a framework-level stop call. This function is called only if this component
	    //    happens to be the assembly controller (or the assembly controller is written such that
	    //    it calls this component's stop function
	    // The vast majority of components won't have their stop function called
		
		// TODO
    }

	public void initialize() throws InitializeError {
	    // This function is called by the framework during construction of the waveform
	    //    it is called before configure() is called, so whatever values you set in the xml properties file
	    //    won't be available when this is called. I wouldn't have done it in this order, but this
	    //    is what the specs call for
		
		// TODO
    }

	public void releaseObject() throws ReleaseError {
		// This is the part of the code where you will put in the logic that will appropriately cleanup
		// your component.  It is appropriate to do Memory Cleanup here since
		// CORBA doesn't like any cleaning up done in the Destructor.
		
	    // TODO
	}
	
	/** 
	 * {@inheritDoc}
	 * With the ArrayBlockingQueue, add an empty array to it. This will
	 * cause anything blocking on it to wake up.
	 */
	protected void clearWaits() {
<% 
    inArrayCount = 0;
    for (Provides p : provides) {
        Interface iface = intMap.get(p.getRepID());
        for (Operation op : IdlJavaUtil.getOperations(iface)) {
            if ("pushPacket".equals(IdlJavaUtil.getOpName(op))) {
                String type = IdlJavaUtil.getParams(op)[0].paramTypeSpec.typeName();
                String additional = type.contains("[]") ? "[0]" : "()";
%>
        this.inputQueue<%=inArrayCount++%>.add(new <%=type.replaceAll("\\[\\]", "")%><%=additional%>);
<%
            }
        }
    }
%>
    }

	/** Generated in component_support */
	public void configure(DataType[] configProperties) throws InvalidConfiguration, PartialConfiguration {
		// Configure is called when a Component is asked to change/set a property that has already been previously defined.
		// Here you will put in the logic that will take care of dealing with the newly requested property, which in turn
		// will allow your Components to be overridden at runtime.
		
		// TODO
		synchronized(propSet) {
			
	    }
    }

	public void query(PropertiesHolder configProperties) throws UnknownProperties {
		// Framework level call that allows a Component to reveal the details of it's properties to interested parties.  You will
		// need to take in the request, find the appropriate property and return that value to the one who queried.
		
		// TODO
    }

    /**************************************************************************************

      Main processing thread
    
      General functionality:
      This function is running as a separate thread from the component's main thread. The function
      is generally in a blocked state, where it is waiting for data to be added to the inputData queues.
    
      The inputData queues will only have something added to them automatically when the component is 
      exiting, otherwise you should set it from either the input port or some other condition.

    **************************************************************************************/

    public void run() 
    {

	    while(this.isComponentAlive())
	    {
<%
    if (provides.size() > 0) {
        inArrayCount = 0;
        for (Provides p : provides) {
            Interface iface = intMap.get(p.getRepID());
            for (Operation op : IdlJavaUtil.getOperations(iface)) {
                if ("pushPacket".equals(IdlJavaUtil.getOpName(op))) {
                    String type = IdlJavaUtil.getParams(op)[0].paramTypeSpec.typeName();
%>
	        // Wait for signal that data is ready (or signal to exit service loop)
	        <%=type%> inputData<%=inArrayCount%> = null;
	        try {
	            inputData<%=inArrayCount%> = this.inputQueue<%=inArrayCount++%>.take(); // This blocks until there is data available
	        } catch (InterruptedException e) {
	            continue;
	        }
	        
		    // If the component was released (framework-level end) while this was locked, then exit loop
		    if (!this.isComponentAlive()) {
		        continue;
		    }
		    
<%
                }
            }
	    } // End for(provides)
    } // End if provides
%>
	        // synchronize on the lock to prevent control information from changing
	        // the operating parameters while a block of data is being processed
	        synchronized (processDataLock) {
	        
		        // If the component was released (framework-level end) while this was locked, then exit loop
		        if (!this.isComponentAlive()) {
		            continue;
		        }
		        
		        // Process data here while the data has been locked
		        // TODO
	        }
	    }
	}
    
	public static void main(String[] args) 
	{
		String naming_context_ior = "";
		String component_identifier = "";
		String name_binding = "";

		// Grab all the command line arguments
		for (int i = 0; i < args.length; i++) {
			if ("NAMING_CONTEXT_IOR".equals(args[i])) {
				naming_context_ior = args[++i];
			} else if ("COMPONENT_IDENTIFIER".equals(args[i])) {
				component_identifier = args[++i];
			} else if ("NAME_BINDING".equals(args[i])) {
				name_binding = args[++i];
			}
		}

        // Make sure that we have all parameters specified
		if ("".equals(name_binding) || "".equals(component_identifier) || "".equals(naming_context_ior)) {
			System.out.println("Argument check failed! Binding: " + name_binding + " Component ID: " + component_identifier + " IOR: "+ naming_context_ior);
			System.exit(-1);
		}

		// Create the component servant and object reference
		<%=PREFIX%> comp = new <%=PREFIX%>(naming_context_ior, component_identifier, name_binding);

		// bind the Object Reference in the Naming Service
        try {
    		// get object reference from the servant
    		org.omg.CORBA.Object ref = comp.getRootpoa().servant_to_reference(comp);
    		Resource href = ResourceHelper.narrow(ref);

        	NameComponent[] path = comp.getNcRef().to_name(name_binding);
	        comp.getNcRef().rebind(path, href);
        } catch (UserException e) {
	        // PASS
        }

		// This bit is ORB specific
		// The servants are running at this point so we wait until
		// The releaseObject method clear the variable and the component exits
        System.out.println("Waiting for completion.");
		while (comp.isComponentAlive()) {
			try {
	            Thread.sleep(1000);
            } catch (InterruptedException e) {
	            // PASS
            }
		}
		
		System.out.println("Done, cleaning up");
		
		try {
		    // Remove this component from the Name Service
	        comp.getNcRef().unbind(comp.getNcRef().to_name(name_binding));
        } catch (UserException e) {
	        // PASS
        }
        comp.getOrb().shutdown(true);
		comp.getOrb().destroy();
	}
}