<%
// For ports that we are aware of and can provide default implementations
List<String> basicDataPorts = Arrays.asList(new String[] {"dataChar", 
                                                          "dataDouble",
                                                          "dataFile",
                                                          "dataFloat", 
                                                          "dataOctet",
                                                          "dataShort",
                                                          "dataUshort",
                                                          "dataLong", 
                                                          "dataUlong",
                                                          "dataLongLong",
                                                          "dataUlongLong"});
boolean queued_ports = (template.getImplSettingsProperties().get("queued_ports") != null) ? 
                       (Boolean.parseBoolean(template.getImplSettingsProperties().get("queued_ports"))) :
                       true;
boolean isBasicDataPort = basicDataPorts.contains(interfaceName);
boolean isDataXml = "dataXML".equals(interfaceName);
boolean isDataSDDS = "dataSDDS".equals(interfaceName);
%> 
    /**
     * @generated
     */
    protected linkStatistics stats;

    /**
     * @generated
     */
    protected Object sriUpdateLock;

    /**
     * @generated
     */
    protected Object statUpdateLock;

<%
if (!isDataSDDS) {
%>
    /**
     * @generated
     */
    protected Map<String, sriState> currentHs;

    /**
     * @generated
     */
    protected Object dataBufferLock;
    
    /**
     * @generated
     */
    protected int maxQueueDepth;
    
    /**
     * @generated
     */
    protected Semaphore queueSem;

    /**
     * @generated
     */
    protected Semaphore dataSem;

    /**
     * @generated
     */
    protected boolean blocking;
    
<%
} else {
%>
    /**
     * @generated
     */
    protected Map<String, SDDSStreamDefinition> attachedStreamMap;

    /**
     * @generated
     */
    protected Map<String, String> attachedUsers;

    /**
     * @generated
     */
    protected Map<String, streamTimePair> currentHs;
    
    /**
     * @generated
     */
    protected boolean sriChanged;
    
<%
}
%>
    /**
     * @generated
     */
    public <%=nameSpace%>_<%=interfaceName%>InPort(<%=PREFIX%> parent, String portName) 
    {
        this.parent = parent;
        this.name = portName;
        this.stats = new linkStatistics(this.name);
        this.sriUpdateLock = new Object();
        this.statUpdateLock = new Object();
<%  if (!isDataSDDS) { %>
        this.currentHs = new HashMap<String, sriState>();
        this.dataBufferLock = new Object();
        this.maxQueueDepth = 100;
        this.queueSem = new Semaphore(this.maxQueueDepth);
        this.dataSem = new Semaphore(0);
        this.blocking = false;
<%  } else {%>
        this.attachedStreamMap = new HashMap<String, SDDSStreamDefinition>();
        this.attachedUsers = new HashMap<String, String>();
        this.currentHs = new HashMap<String, streamTimePair>();
        this.sriChanged = false;
<%  }%>
         
        //begin-user-code
        //end-user-code
    }

<%  if (!isDataSDDS) { %>
    /**
     * @generated
     */
    public void pushSRI(StreamSRI header) {
        synchronized (this.sriUpdateLock) {
            if (!this.currentHs.containsKey(header.streamID)) {
                this.currentHs.put(header.streamID, new sriState(header, true));
                if (header.blocking) {
                    //If switching to blocking we have to set the semaphore
                    synchronized (this.dataBufferLock) {
                        if (!blocking) {
                                try {
                                    queueSem.acquire(data.size());
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }    
                        }
                        blocking = true;
                    }
                }
            } else {
                StreamSRI oldSri = this.currentHs.get(header.streamID).getSRI();
                if (!parent.compareSRI(header, oldSri)) {
                    this.currentHs.put(header.streamID, new sriState(header, true));
                    if (header.blocking) {
                        //If switching to blocking we have to set the semaphore
                        synchronized (this.dataBufferLock) {
                            if (!blocking) {
                                    try {
                                        queueSem.acquire(data.size());
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }    
                            }
                            blocking = true;
                        }
                    }
                }
            }
        }

        //begin-user-code
        //end-user-code
    }

<%  }%>
    /**
     * @generated
     */
    public void enableStats(boolean enable) {
        this.stats.setEnabled(enable);
    }

<%  if (isDataSDDS) { %>
    /**
     * @generated
     */
    public void setBitSize(double bitSize) {
        synchronized (statUpdateLock) {
            this.stats.setBitSize(bitSize);
        }
    };

    /**
     * @generated
     */
    public void updateStats(int elementsReceived, float queueSize, boolean EOS, String streamID, boolean flush) {
        synchronized (statUpdateLock) {
            this.stats.update(elementsReceived, queueSize, EOS, streamID, flush);
        }
    };

<%  }%>
    /**
     * @generated
     */
    public PortStatistics statistics() {
        synchronized (statUpdateLock) {
            return this.stats.retrieve();
        }
    }

    /**
     * @generated
     */
    public PortUsageType state() {
<%  if (isBasicDataPort || isDataXml) {
        if (queued_ports) {
%>
        int queueSize = 0;
        synchronized (dataBufferLock) {
            queueSize = data.size();
	        if (queueSize == this.maxQueueDepth) {
	            return PortUsageType.BUSY;
	        } else if (queueSize == 0) {
	            return PortUsageType.IDLE;
	        }
	        return PortUsageType.ACTIVE;
	    }
<%      } else { %>
        //begin-user-code
        // TODO you will need to provide a port implementation (queued ports option not selected)
        //end-user-code
<%      }
    } else {
%>
        if (this.currentHs.size() == 0) {
            return PortUsageType.IDLE;
        }
        return PortUsageType.ACTIVE;
<%
    }
%>
    }

<%  if (!isDataSDDS) { %>
    /**
     * @generated
     */
    public StreamSRI[] activeSRIs() {
        synchronized (this.sriUpdateLock) {
            ArrayList<StreamSRI> sris = new ArrayList<StreamSRI>();
            Iterator<sriState> iter = this.currentHs.values().iterator();
            while(iter.hasNext()) {
                sris.add(iter.next().getSRI());
            }
            return sris.toArray(new StreamSRI[sris.size()]);
        }
    }
    
    /**
     * @generated
     */
    public int getCurrentQueueDepth() {
        synchronized (this.dataBufferLock) {
            return data.size();
        }
    }
    
    /**
     * @generated
     */
    public int getMaxQueueDepth() {
        synchronized (this.dataBufferLock) {
            return this.maxQueueDepth;
        }
    }
    
    /**
     * @generated
     */
    public void setMaxQueueDepth(int newDepth) {
        synchronized (this.dataBufferLock) {
            this.maxQueueDepth = newDepth;
            queueSem = new Semaphore(newDepth);
        }
    }

<%  }%>
    /**
     * @generated
     */
    public String getName() {
        return this.name;
    }
<%  if (isBasicDataPort || isDataXml) {
      String dataTransfer = "";
      for (Operation op : IdlJavaUtil.getOperations(iface)) {
        if ("pushPacket".equals(IdlJavaUtil.getOpName(op))) {
          dataTransfer = IdlJavaUtil.getParamType(IdlJavaUtil.getParams(op)[0]);
          break;
        }
      }
%>
  
<%    if (queued_ports) {%>   
    /**
     * A class to hold packet data.
     * @generated
     */
    public class Packet<T extends Object> {
        /** @generated */
        private final T data;
        /** @generated */
        private final PrecisionUTCTime time;
        /** @generated */
        private final boolean endOfStream;
        /** @generated */
        private final String streamID;
        /** @generated */
        private final StreamSRI H;
        /** @generated */
        private final boolean inputQueueFlushed;
        /** @generated */
        private final boolean sriChanged;
        
        /**
         * @generated
         */
        public Packet(T data, PrecisionUTCTime time, boolean endOfStream, String streamID, StreamSRI H, boolean sriChanged, boolean inputQueueFlushed) {
            this.data = data;
            this.time = time;
            this.endOfStream = endOfStream;
            this.streamID = streamID;
            this.H = H;
            this.inputQueueFlushed = inputQueueFlushed;
            this.sriChanged = sriChanged;
        };
        
        /**
         * @generated
         */
        public T getData() {
            return this.data;
        }
        
        /**
         * @generated
         */
        public PrecisionUTCTime getTime() {
            return this.time;
        }
        
        /**
         * @generated
         */
        public boolean getEndOfStream() {
            return this.endOfStream;
        }
        
        /**
         * @generated
         */
        public String getStreamID() {
            return this.streamID;
        }
        
        /**
         * @generated
         */
        public StreamSRI getSRI() {
            return this.H;
        }
        
        /**
         * This returns true if the input queue for the port was cleared because
         * the queue reached its size limit. The number of packets discarded
         * before this packet is equal to maxQueueDepth.
         * @generated
         */
        public boolean inputQueueFlushed() {
            return this.inputQueueFlushed;
        }
        
        /**
         * @generated
         */
        public boolean sriChanged() {
            return this.sriChanged;
        }
    };
    
    /**
     * This queue stores all packets received from pushPacket.
     * @generated
     */
    private ArrayDeque<Packet<<%=dataTransfer%>>> data = new  ArrayDeque<Packet<<%=dataTransfer%>>>();
    
<%    }%>

    /**
     * @generated
     */
<%    if (isBasicDataPort) {%>
    public void pushPacket(<%=dataTransfer%> data, PrecisionUTCTime time, boolean endOfStream, String streamID)
<%    } else if (isDataXml) {%>
    public void pushPacket(String data, boolean endOfStream, String streamID) 
<%    }%> 
    {
<%    if (queued_ports) {%>
        synchronized (this.dataBufferLock) {
            if (this.maxQueueDepth == 0) {
                return;
            }
        }
        
        boolean portBlocking = false;
        StreamSRI tmpH = new StreamSRI(1, 0.0, 1.0, (short)1, 0, 0.0, 0.0, (short)0, (short)0, streamID, false, new DataType[0]);
        boolean sriChanged = false;
        synchronized (this.sriUpdateLock) {
            if (this.currentHs.containsKey(streamID)) {
                tmpH = this.currentHs.get(streamID).getSRI();
                sriChanged = this.currentHs.get(streamID).isChanged();
                this.currentHs.get(streamID).setChanged(false);
                portBlocking = blocking;
            }
        }

        //begin-user-code
        //end-user-code

        // determine whether to block and wait for an empty space in the queue
<%      if (isBasicDataPort) {%>
        Packet<<%=dataTransfer%>> p = null;

        if (portBlocking) {
            p = new Packet<<%=dataTransfer%>>(data, time, endOfStream, streamID, tmpH, sriChanged, false);

            try {
                queueSem.acquire();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized (this.dataBufferLock) {
                this.stats.update(data.length<%if ("dataFile".equals(interfaceName)) {%>()<%}%>, this.data.size()/this.maxQueueDepth, endOfStream, streamID, false);
                this.data.add(p);
                this.dataSem.release();
            }
        } else {
            synchronized (this.dataBufferLock) {
	            if (this.data.size() == this.maxQueueDepth) {
	                this.data.clear();
	                p = new Packet<<%=dataTransfer%>>(data, time, endOfStream, streamID, tmpH, sriChanged, true);
	                this.stats.update(data.length<%if ("dataFile".equals(interfaceName)) {%>()<%}%>, 0, endOfStream, streamID, true);
	            } else {
                    p = new Packet<<%=dataTransfer%>>(data, time, endOfStream, streamID, tmpH, sriChanged, false);
	                this.stats.update(data.length<%if ("dataFile".equals(interfaceName)) {%>()<%}%>, this.data.size()/this.maxQueueDepth, endOfStream, streamID, false);
	            }
	            this.data.add(p);
	            this.dataSem.release();
	        }
        }
<%      } else if (isDataXml) {%>
        Packet<<%=dataTransfer%>> p = null;

        if (portBlocking) {
            p = new Packet<<%=dataTransfer%>>(data, null, endOfStream, streamID, tmpH, sriChanged, false);

            try {
                queueSem.acquire();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            synchronized (this.dataBufferLock) {
                this.stats.update(data.length(), this.data.size()/this.maxQueueDepth, endOfStream, streamID, false);
                this.data.add(p);
            }
        } else {
            synchronized (this.dataBufferLock) {
	            if (this.data.size() == this.maxQueueDepth) {
	                this.data.clear();
	                p = new Packet<<%=dataTransfer%>>(data, null, endOfStream, streamID, tmpH, sriChanged, true);
	                this.stats.update(data.length(), 0, endOfStream, streamID, true);
	            } else {
                    p = new Packet<<%=dataTransfer%>>(data, null, endOfStream, streamID, tmpH, sriChanged, false);
	                this.stats.update(data.length(), this.data.size()/this.maxQueueDepth, endOfStream, streamID, false);
	            }
	            this.data.add(p);
	        }
        }
<%      }%>

        //begin-user-code
        //end-user-code
<%    } else {%>
        //begin-user-code
        // TODO you will need to provide a port implementation (queued ports option not selected)
        //end-user-code
<%    }%> 
        return;
    }

<%    if (queued_ports) {%>     
    /**
     * @generated
     */
    public Packet<<%=dataTransfer%>> getPacket(long wait) 
    {
        //begin-user-code
        //end-user-code
        try {
            if (wait < 0) {
                this.dataSem.acquire();
            } else {
                this.dataSem.tryAcquire(wait, TimeUnit.MILLISECONDS);
            }
        } catch (InterruptedException ex) {
            return null;
        }
        
        Packet<<%=dataTransfer%>> p = null;
        synchronized (this.dataBufferLock) {
            p = this.data.poll();
        }

        if (p != null) {
            if (p.getEndOfStream()) {
                synchronized (this.sriUpdateLock) {
                    if (this.currentHs.containsKey(p.getStreamID())) {
                        sriState rem = this.currentHs.remove(p.getStreamID());

                        if (rem.getSRI().blocking) {
                            boolean stillBlocking = false;
                            Iterator<sriState> iter = currentHs.values().iterator();
                            while (iter.hasNext()) {
                            	if (iter.next().getSRI().blocking) {
                                    stillBlocking = true;
                                    break;
                                }
                            }

                            if (!stillBlocking) {
                                blocking = false;
                            }
                        }
                    }
                }
            }
            
            if (blocking) {
                queueSem.release();
            }
        }

        return p;
    }
<%    }%>
<%  }%>

    /**
     * @generated
     */
	public class sriState {
		/** @generated */
        protected StreamSRI sri;
        /** @generated */
        protected boolean changed;
        
        /**
         * @generated
         */
        public sriState(StreamSRI sri, boolean changed) {
        	this.sri = sri;
        	this.changed = changed;
        }
        
        /**
         * @generated
         */
        public StreamSRI getSRI() {
        	return this.sri;
        }
        
        /**
         * @generated
         */
        public boolean isChanged() {
        	return this.changed;
        }
        
        /**
         * @generated
         */
        public void setSRI(StreamSRI sri) {
        	this.sri = sri;
        }
        
        /**
         * @generated
         */
        public void setChanged(boolean changed) {
        	this.changed = changed;
        }
	}

    /**
     * @generated
     */
    public class statPoint {
        /** @generated */
        int elements;
        /** @generated */
        float queueSize;
        /** @generated */
        double secs;
        /** @generated */
        double usecs;
    }

    /**
     * @generated
     */
    public class linkStatistics {
        /** @generated */
        protected boolean enabled;
        /** @generated */
        protected double bitSize;
        /** @generated */
        protected PortStatistics runningStats;
        /** @generated */
        protected statPoint[] receivedStatistics;
        /** @generated */
        protected List< String > activeStreamIDs;
        /** @generated */
        protected int historyWindow;
        /** @generated */
        protected int receivedStatistics_idx;
        /** @generated */
        protected double flushTime;
        /** @generated */
        protected String portName;
        
        /**
         * @generated
         */
        public linkStatistics(String portName) {
            this.enabled = true;
            this.bitSize = <%=PortHelper.ifaceToBytes(interfaceName)%> * 8.0;
            this.historyWindow = 10;
            this.flushTime = 0.0;
            this.receivedStatistics_idx = 0;
            this.receivedStatistics = new <%=nameSpace%>_<%=interfaceName%>InPort.statPoint[historyWindow];
            this.activeStreamIDs = new ArrayList<String>();
            this.portName = portName;
            this.runningStats = new PortStatistics();
            this.runningStats.portName = this.portName;
            this.runningStats.elementsPerSecond = -1.0f;
            this.runningStats.bitsPerSecond = -1.0f;
            this.runningStats.callsPerSecond = -1.0f;
            this.runningStats.averageQueueDepth = -1.0f;
            this.runningStats.streamIDs = new String[0];
            this.runningStats.timeSinceLastCall = -1.0f;
            this.runningStats.keywords = new DataType[0];
            for (int i = 0; i < historyWindow; ++i) {
                this.receivedStatistics[i] = new <%=nameSpace%>_<%=interfaceName%>InPort.statPoint();
            }
        }

        /**
         * @generated
         */
        public void setBitSize(double bitSize) {
            this.bitSize = bitSize;
        }

        /**
         * @generated
         */
        public void setEnabled(boolean enableStats) {
            this.enabled = enableStats;
        }

        /**
         * @generated
         */
        public void update(int elementsReceived, float queueSize, boolean EOS, String streamID, boolean flush) {
            if (!this.enabled) {
                return;
            }
            double currTime = System.nanoTime() * 1.0e-9;
            this.receivedStatistics[this.receivedStatistics_idx].elements = elementsReceived;
            this.receivedStatistics[this.receivedStatistics_idx].queueSize = queueSize;
            this.receivedStatistics[this.receivedStatistics_idx++].secs = currTime;
            if (!EOS) {
                if (!this.activeStreamIDs.contains(streamID)) {
                    this.activeStreamIDs.add(streamID);
                }
            } else {
                this.activeStreamIDs.remove(streamID);
            }
            this.receivedStatistics_idx = this.receivedStatistics_idx % this.historyWindow;
            if (flush) {
                this.flushTime = currTime;
            }
        }

        /**
         * @generated
         */
        public PortStatistics retrieve() {
            if (!this.enabled) {
                return null;
            }
            double secs = System.nanoTime() * 1.0e-9;
            int idx = (this.receivedStatistics_idx == 0) ? (this.historyWindow - 1) : (this.receivedStatistics_idx - 1);
            double front_sec = this.receivedStatistics[idx].secs;
            double totalTime = secs - this.receivedStatistics[this.receivedStatistics_idx].secs;
            double totalData = 0;
            float queueSize = 0;
            int startIdx = (this.receivedStatistics_idx + 1) % this.historyWindow;
            for (int i = startIdx; i != this.receivedStatistics_idx; ) {
                totalData += this.receivedStatistics[i].elements;
                queueSize += this.receivedStatistics[i].queueSize;
                i = (i + 1) % this.historyWindow;
            }
            int receivedSize = receivedStatistics.length;
            synchronized (this.runningStats) {
                this.runningStats.timeSinceLastCall = (float)(secs - front_sec);
                this.runningStats.bitsPerSecond = (float)((totalData * this.bitSize) / totalTime);
                this.runningStats.elementsPerSecond = (float)(totalData / totalTime);
                this.runningStats.averageQueueDepth = (float)(queueSize / receivedSize);
                this.runningStats.callsPerSecond = (float)((receivedSize - 1) / totalTime);
                this.runningStats.streamIDs = this.activeStreamIDs.toArray(new String[0]);
                if (flushTime != 0.0) {
                    double flushTotalTime = secs - this.flushTime;
                    this.runningStats.keywords = new DataType[1];
                    this.runningStats.keywords[0] = new DataType();
                    this.runningStats.keywords[0].id = "timeSinceLastFlush";
                    this.runningStats.keywords[0].value = AnyUtils.toAny(new Double(flushTotalTime), TCKind.tk_double);
                }
            }
            return this.runningStats;
        }
    }
    
<%  if (isDataSDDS) {%>
    /**
     * @generated
     */
    public class streamTimePair {
        /** @generated */
        StreamSRI stream;
        /** @generated */
        PrecisionUTCTime time;
        
        /**
         * @generated
         */
        public streamTimePair(final StreamSRI stream, final PrecisionUTCTime time) {
            this.stream = stream;
            this.time = time;
        }
    }

    /**
     * @generated
     */
    public StreamSRI[] activeSRIs() {
        synchronized (this.sriUpdateLock) {
            return this.currentHs.keySet().toArray(new StreamSRI[0]);
        }
    }

    /**
     * @generated
     */
    public String attach(SDDSStreamDefinition stream, String userid) throws AttachError, StreamInputError {
        final String attachId = this.parent.attach(stream, userid);
        this.attachedStreamMap.put(attachId, stream);
        this.attachedUsers.put(attachId, userid);

        return attachId;
    }

    /**
     * @generated
     */
    public void detach(String attachId) throws DetachError, StreamInputError {
        this.parent.detach(attachId);
        this.attachedStreamMap.remove(attachId);
        this.attachedUsers.remove(attachId);
    }

    /**
     * @generated
     */
    public StreamSRI[] attachedSRIs() {
        StreamSRI[] sris = new StreamSRI[0];
        synchronized (this.sriUpdateLock) {
            sris = new StreamSRI[this.currentHs.size()];
            int idx = 0;

            for (streamTimePair vals : this.currentHs.values()) {
                sris[idx++] = vals.stream;
            }
        }
        return sris;
    }

    /**
     * @generated
     */
    public SDDSStreamDefinition[] attachedStreams() {
        return this.attachedStreamMap.values().toArray(new SDDSStreamDefinition[0]);
    }

    /**
     * @generated
     */
    public String[] attachmentIds() {
        return this.attachedStreamMap.keySet().toArray(new String[0]);
    }

    /**
     * @generated
     */
    public SDDSStreamDefinition getStreamDefinition(String attachId) throws StreamInputError {
        return this.attachedStreamMap.get(attachId);
    }

    /**
     * @generated
     */
    public String getUser(String attachId) throws StreamInputError {
        return this.attachedUsers.get(attachId);
    }

    /**
     * @generated
     */
    public void pushSRI(StreamSRI H, PrecisionUTCTime T) {
        synchronized (this.sriUpdateLock) {
            streamTimePair tmpH = this.currentHs.get(H.streamID);
            if (tmpH != null) {
                tmpH.stream = H;
                tmpH.time = T;
            	this.sriChanged = !this.parent.compareSRI(tmpH.stream, H) || !this.parent.compareTime(tmpH.time, T);
            } else {
                this.currentHs.put(H.streamID, new streamTimePair(H, T));
                this.sriChanged = true;
            }
        }
    }

    /**
     * @generated
     */
    public InputUsageState usageState() {
        if (this.attachedStreamMap.size() == 0) {
            return InputUsageState.IDLE;
        } else if (this.attachedStreamMap.size() == 1) {
            return InputUsageState.BUSY;
        } else {
            return InputUsageState.ACTIVE;
        }
    }
    
    /**
     * @generated
     */
    public boolean hasSriChanged() {
        return this.sriChanged;
    }

<%  }%>