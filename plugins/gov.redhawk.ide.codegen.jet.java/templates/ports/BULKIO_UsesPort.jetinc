/**
 * @generated
 */
<%	String className = nameSpace + "_" + interfaceName + "OutPort"; %>
public class <%=className%> extends UsesPortStatisticsProviderPOA {

<%
        if (pushPacketCall || pushXMLPacketCall) { 
%>
    /**
     * @generated
     */
    protected <%=dataTransfer%> dataOut;

    /**
     * @generated
     */
    protected boolean refreshSRI;
    
<%
        }
%>
    /**
     * Map of connection Ids to port objects
     * @generated
     */
    protected Map<String, <%=interfaceName%>Operations> outConnections = new HashMap<String, <%=interfaceName%>Operations>();

    /**
     * Map of connection ID to statistics
     * @generated
     */
    protected Map<String, <%=className%>.linkStatistics> stats;

<%
        if (pushPacketCall || pushXMLPacketCall) { 
%>
    /**
     * Map of stream IDs to streamSRI's
     * @generated
     */
    protected Map<String, StreamSRI> currentSRIs;

<%
        } else if (dataSDDSPort) { 
%>
    /**
     * Map of stream IDs to streamSRI/Time pairs
     * @generated
     */
    protected Map<String, BULKIO_dataSDDSOutPort.streamTimePair> currentSRIs;

    /**
     * Map of attachIds to SDDSStreamDefinition/UserID pairs
     * @generated
     */
    protected Map<String, BULKIO_dataSDDSOutPort.streamdefUseridPair> attachedGroup;

    /**
     * Map of attachIds to Ports
     * @generated
     */
    protected Map<String, org.omg.CORBA.Object> attachedPorts;

    /**
     * @generated
     */
    protected SDDSStreamDefinition lastStreamData;

    /**
     * @generated
     */
    protected String userId;

<%
        } 
%>
    /**
     * @generated
     */
	protected String name;

    /**
     * @generated
     */
	protected Object updatingPortsLock;

    /**
     * @generated
     */
	protected boolean active;

    /**
     * @generated
     */
    public <%=className%>(String portName) 
    {
        this.name = portName;
        this.updatingPortsLock = new Object();
        this.active = false;
        this.outConnections = new HashMap<String, <%=interfaceName%>Operations>();
        this.stats = new HashMap<String, <%=className%>.linkStatistics>();
<%
        if (!dataSDDSPort) { 
%>
        this.currentSRIs = new HashMap<String, StreamSRI>();
<%
        } else { 
%>
        this.currentSRIs = new HashMap<String, streamTimePair>();
        this.attachedGroup = new HashMap<String, <%=className%>.streamdefUseridPair>();
        this.attachedPorts = new HashMap<String, org.omg.CORBA.Object>();
        this.lastStreamData = null;
<%
        } 
%>

        //begin-user-code
        //end-user-code
    }

    /**
     * @generated
     */
    public PortUsageType state() {
        PortUsageType state = PortUsageType.IDLE;

        if (this.outConnections.size() > 0) {
            state = PortUsageType.ACTIVE;
        }

        //begin-user-code
        //end-user-code

        return state;
    }

    /**
     * @generated
     */
    public void enableStats(final boolean enable)
    {
        for (String connId : outConnections.keySet()) {
            stats.get(connId).enableStats(enable);
        }
    };

<%
        if (dataSDDSPort) { 
%>
    /**
     * @generated
     */
    public void setBitSize(final double bitSize)
    {
        for (String connId : outConnections.keySet()) {
            stats.get(connId).setBitSize(bitSize);
        }
    };

    /**
     * @generated
     */
    public void updateStats(final int elementsReceived, final int queueSize, final boolean EOS, final String streamID)
    {
        for (String connId : outConnections.keySet()) {
            stats.get(connId).update(elementsReceived, queueSize, EOS, streamID);
        }
    };

<%
        } 
%>
    /**
     * @generated
     */
    public UsesPortStatistics[] statistics() {
        UsesPortStatistics[] portStats = new UsesPortStatistics[this.outConnections.size()];
        int i = 0;
        
        synchronized (this.updatingPortsLock) {
            for (String connId : this.outConnections.keySet()) {
                portStats[i] = new UsesPortStatistics(connId, this.stats.get(connId).retrieve());
            }
        }
        
        return portStats;
    }

<%
        if (!dataSDDSPort) { 
%>
    /**
     * @generated
     */
    public StreamSRI[] activeSRIs() 
    {
        return this.currentSRIs.values().toArray(new StreamSRI[0]);
    }

<%
        } else {
%>
    /**
     * @generated
     */
    public StreamSRI[] activeSRIs() 
    {
        List<StreamSRI> sris = new ArrayList<StreamSRI>();
        for (streamTimePair val : this.currentSRIs.values()) {
            sris.add(val.stream);
        }
        return sris.toArray(new StreamSRI[0]);
    }

<%
        }
%>
    /**
     * @generated
     */
    public boolean isActive() {
        return this.active;
    }

    /**
     * @generated
     */
    public void setActive(final boolean active) {
        this.active = active;
    }

    /**
     * @generated
     */
    public String getName() {
        return this.name;
    }

    /**
     * @generated
     */
    public HashMap<String, <%=interfaceName%>Operations> getPorts() {
        return new HashMap<String, <%=interfaceName%>Operations>();
    }
<%
        for (Operation op : IdlJavaUtil.getOperations(iface)) {
            ScopedName[] raises = IdlJavaUtil.getRaises(op);
            String throwsString = (raises.length > 0) ? "throws " + raises[0].resolvedName() : "";
            for (int i = 1; i < raises.length; ++i) {
                throwsString += ", " + raises[i].resolvedName();
            }
            if ("pushPacket".equals(IdlJavaUtil.getOpName(op))) {
                type = dataTransfer.endsWith("[]") ? dataTransfer.substring(0, dataTransfer.length() - 2).toLowerCase() : dataTransfer.toLowerCase();
                if (pushPacketCall) {
%>
        
    /**
     * @generated
     */
    public void pushPacket(<%=dataTransfer%> <%=type%>Data, PrecisionUTCTime time, boolean endOfStream, String streamID) 
    {
<%
                } else {
%>
        
    /**
     * @generated
     */
    public void pushPacket(<%=dataTransfer%> <%=type%>Data, boolean endOfStream, String streamID) 
    {
<%
                }
%>
        if (this.refreshSRI) {
        	if (!this.currentSRIs.containsKey(streamID)) {
<%
			if ("dataXML".equals(interfaceName)) {
%>
				StreamSRI sri = new StreamSRI();
				sri.mode = 0;
				sri.xdelta = 0.0;
				sri.ydelta = 0.0;
				sri.subsize = 0;
				sri.xunits = 1; // TIME_S
				sri.streamID = streamID;
                sri.blocking = false;
<%
			} else {
%>
				StreamSRI sri = new StreamSRI();
				sri.mode = 0;
				sri.xdelta = 1.0;
				sri.ydelta = 0.0;
				sri.subsize = 0;
				sri.xunits = 1; // TIME_S
				sri.streamID = streamID;
                sri.blocking = false;
<%
			}
%>
                this.currentSRIs.put(streamID, <%if (!dataSDDSPort) {%>sri<%} else {%>new streamTimePair(sri, time)<%}%>);
            }
            this.pushSRI(this.currentSRIs.get(streamID));
        }
        
        synchronized(this.updatingPortsLock) {    // don't want to process while command information is coming in
            this.dataOut = <%=type%>Data;
            if (this.active) {
                //begin-user-code
                //end-user-code
                
                for (Entry<String, <%=interfaceName%>Operations> p : this.outConnections.entrySet()) {
                    try {
<%
                if (pushPacketCall) {
%>
                        p.getValue().pushPacket(this.dataOut, time, endOfStream, streamID);
                        this.stats.get(p.getKey()).update(this.dataOut.length<%if ("dataFile".equals(interfaceName)) {%>()<%}%>, 0, endOfStream, streamID);
<%
                } else {
%>
                        p.getValue().pushPacket(this.dataOut, endOfStream, streamID);
                        this.stats.get(p.getKey()).update(this.dataOut.length(), 0, endOfStream, streamID);
<%
                }
%>
                    } catch(Exception e) {
                        System.out.println("Call to pushPacket by <%=className%> failed");
                    }
                }

                //begin-user-code
                //end-user-code
            }
        }    // don't want to process while command information is coming in
        
        return;
    }
<%
                continue;
            } else if ("pushSRI".equals(IdlJavaUtil.getOpName(op))) {
%>
 
    /**
     * pushSRI
     *     description: send out SRI describing the data payload
     *
     *  H: structure of type BULKIO::StreamSRI with the SRI for this stream
     *    hversion
     *    xstart: start time of the stream
     *    xdelta: delta between two samples
     *    xunits: unit types from Platinum specification
     *    subsize: 0 if the data is one-dimensional
     *    ystart
     *    ydelta
     *    yunits: unit types from Platinum specification
     *    mode: 0-scalar, 1-complex
     *    streamID: stream identifier
     *    sequence<CF::DataType> keywords: unconstrained sequence of key-value pairs for additional description
<%
                if (dataSDDSPort) {
%>
     *
     *  T: structure of type BULKIO::PrecisionUTCTime with the Time for this stream
     *    tcmode: timecode mode
     *    tcstatus: timecode status
     *    toff: Fractional sample offset
     *    twsec
     *    tfsec
<%
                }
%>
     * @generated
     */
    public void pushSRI(StreamSRI header<%if (dataSDDSPort) {%>, PrecisionUTCTime time<%}%>) 
    {
        // Header cannot be null
        if (header == null) return;
        // Header cannot have null keywords
        if (header.keywords == null) header.keywords = new DataType[0];

        synchronized(this.updatingPortsLock) {    // don't want to process while command information is coming in
            if (this.active) {
                //begin-user-code
                //end-user-code

                for (<%=interfaceName%>Operations p : this.outConnections.values()) {
                    try {
                        p.pushSRI(header<%if ("dataSDDS".equals(interfaceName)) {%>, time<%}%>);
                    } catch(Exception e) {
                        System.out.println("Call to pushSRI by <%=className%> failed");
                    }
                }
            }

            //begin-user-code
            //end-user-code
            
            this.currentSRIs.put(header.streamID, <%if (!dataSDDSPort) {%>header<%} else {%>new streamTimePair(header, time)<%}%>);
<%
        if (pushPacketCall || pushXMLPacketCall) { 
%>
            this.refreshSRI = false;
<%
        } 
%>

            //begin-user-code
            //end-user-code
        }    // don't want to process while command information is coming in

        return;
    }
<%
                continue;
            }
        }            
%>

    /**
     * @generated
     */
    public void connectPort(final org.omg.CORBA.Object connection, final String connectionId) throws CF.PortPackage.InvalidPort, CF.PortPackage.OccupiedPort
    {
        synchronized (this.updatingPortsLock) {
            final <%=interfaceName%>Operations port;
            try {
            	port = <%=helperName%>.narrow(connection);
            } catch (final Exception ex) {
            	throw new CF.PortPackage.InvalidPort((short)1, "Invalid port for connection '" + connectionId + "'");
            }
            this.outConnections.put(connectionId, port);
            this.active = true;
            this.stats.put(connectionId, new linkStatistics());
<%
        if (pushPacketCall || pushXMLPacketCall) { 
%>
            this.refreshSRI = true;
<%
        } else { 
%>
            if (this.lastStreamData != null) {
                try {
                    final String attachId = port.attach(this.lastStreamData, this.userId);
                    this.attachedGroup.put(attachId, new streamdefUseridPair(this.lastStreamData, this.userId));
                    this.attachedPorts.put(attachId, connection);
                } catch (AttachError a) {
                    // PASS
                } catch (StreamInputError e) {
                    // PASS
                }
            }
<%
        } 
%>
        
            //begin-user-code
            //end-user-code
        }
    }

    /**
     * @generated
     */
    public void disconnectPort(String connectionId) {
        synchronized (this.updatingPortsLock) {
            <%=interfaceName%>Operations port = this.outConnections.remove(connectionId);
            this.stats.remove(connectionId);
            this.active = (this.outConnections.size() != 0);

<%
        if (dataSDDSPort) { 
%>
            for (Entry<String, org.omg.CORBA.Object> entry : this.attachedPorts.entrySet()) {
                if (entry.getValue().equals((org.omg.CORBA.Object) port)) {
                    final String attachId = entry.getKey();
                    this.attachedPorts.remove(attachId);
                    this.attachedGroup.remove(attachId);
                    try {
                        port.detach(attachId);
                    } catch (DetachError e) {
                        // PASS
                    } catch (StreamInputError e) {
                        // PASS
                    }
                    break;
                }
            }
            
<%
        } 
%>
            //begin-user-code
            //end-user-code
        }
    }

    /**
     * @generated
     */
    public UsesConnection[] connections() {
        final UsesConnection[] connList = new UsesConnection[this.outConnections.size()];
        int i = 0;
        synchronized (this.updatingPortsLock) {
            for (Entry<String, <%=interfaceName%>Operations> ent : this.outConnections.entrySet()) {
                connList[i++] = new UsesConnection(ent.getKey(), (org.omg.CORBA.Object) ent.getValue());
            }
        }
        return connList;
    }

<%
        if (dataSDDSPort) { 
%>
    /**
     * @generated
     */
    public SDDSStreamDefinition getStreamDefinition(final String attachId)
    {
        final <%=className%>.streamdefUseridPair defPair = this.attachedGroup.get(attachId);
        return (defPair == null) ? new SDDSStreamDefinition() : defPair.streamDef;
    }

    /**
     * @generated
     */
    public String getUser(final String attachId)
    {
        final <%=className%>.streamdefUseridPair defPair = this.attachedGroup.get(attachId);
        return (defPair == null) ? "" : defPair.userId;
    }

    /**
     * @generated
     */
    public InputUsageState usageState()
    {
        if (this.attachedGroup.size() == 0) {
            return InputUsageState.IDLE;
        } else if (this.attachedGroup.size() == 1) {
            return InputUsageState.BUSY;
        } else {
            return InputUsageState.ACTIVE;
        }
    }

    /**
     * @generated
     */
    public SDDSStreamDefinition[] attachedStreams()
    {
        return new SDDSStreamDefinition[] { (this.lastStreamData != null) ? this.lastStreamData : new SDDSStreamDefinition()};
    }

    /**
     * @generated
     */
    public String[] attachmentIds()
    {
        return this.attachedGroup.keySet().toArray(new String[0]);
    }

    /**
     * @generated
     */
    public String attach(final SDDSStreamDefinition streamDef, final String userId) throws AttachError, StreamInputError
    {
        String attachId = null;
        synchronized (this.updatingPortsLock) {
            this.userId = userId;
            this.lastStreamData = streamDef;
            for (Entry<String, org.omg.CORBA.Object> entry : this.attachedPorts.entrySet()) {
                try {
                    ((dataSDDSOperations) entry.getValue()).detach(entry.getKey());
                } catch (DetachError d) {
                    // PASS
                }
                this.attachedGroup.remove(entry.getKey());
            }
            
            for (dataSDDSOperations port : this.outConnections.values()) {
                attachId = port.attach(streamDef, userId);
                this.attachedGroup.put(attachId, new <%=className%>.streamdefUseridPair(streamDef, userId));
                this.attachedPorts.put(attachId, (org.omg.CORBA.Object) port);
            }
        }
        return attachId;
    }

    /**
     * @generated
     */
    public void detach(String attachId, String connectionId) throws DetachError, StreamInputError
    {
        synchronized (this.updatingPortsLock) {
            dataSDDSOperations port = this.outConnections.get(connectionId);
            if (this.attachedPorts.containsKey(attachId)) {
                port.detach(attachId);
            }
        }
    }

    /**
     * @generated
     */
    public class streamTimePair {
        /** @generated */
        StreamSRI stream;
        /** @generated */
        PrecisionUTCTime time;
        
        /** 
         * @generated
         */
        public streamTimePair(final StreamSRI stream, final PrecisionUTCTime time) {
            this.stream = stream;
            this.time = time;
        }
    }

    /**
     * @generated
     */
    public class streamdefUseridPair {
        /** @generated */
        SDDSStreamDefinition streamDef;
        /** @generated */
        String userId;
        
        /** 
         * @generated
         */
        public streamdefUseridPair(final SDDSStreamDefinition streamDef, final String userId) {
            this.streamDef = streamDef;
            this.userId = userId;
        }
    }

<%
        } 
%>
    /**
     * @generated
     */
    public class statPoint implements Cloneable {
        /** @generated */
        int elements;
        /** @generated */
        float queueSize;
        /** @generated */
        double secs;
    }
    
    /**
     * @generated
     */
    public class linkStatistics {
        /** @generated */
        protected double bitSize;
        /** @generated */
        protected PortStatistics runningStats;
        /** @generated */
        protected statPoint[] receivedStatistics;
        /** @generated */
        protected List<String> activeStreamIDs;
        /** @generated */
        protected final int historyWindow;
        /** @generated */
        protected int receivedStatistics_idx;
        /** @generated */
        protected boolean enabled;

        /**
         * @generated
         */
        public linkStatistics() {
            this.enabled = true;
            this.bitSize = <%=PortHelper.ifaceToBytes(interfaceName)%> * 8.0;
            this.historyWindow = 10;
            this.receivedStatistics_idx = 0;
            this.receivedStatistics = new <%=className%>.statPoint[historyWindow];
            this.activeStreamIDs = new ArrayList<String>();
            this.runningStats = new PortStatistics();
            this.runningStats.portName = <%=className%>.this.name;
            this.runningStats.elementsPerSecond = -1.0f;
            this.runningStats.bitsPerSecond = -1.0f;
            this.runningStats.callsPerSecond = -1.0f;
            this.runningStats.averageQueueDepth = -1.0f;
            this.runningStats.streamIDs = new String[0];
            this.runningStats.timeSinceLastCall = -1.0f;
            this.runningStats.keywords = new DataType[0];
            for (int i = 0; i < historyWindow; ++i) {
                this.receivedStatistics[i] = new <%=className%>.statPoint();
            }
        }

        /**
         * @generated
         */
        public void setBitSize(double bitSize) {
            this.bitSize = bitSize;
        }

        /**
         * @generated
         */
        public void enableStats(boolean enable) {
            this.enabled = enable;
        }

        /**
         * @generated
         */
        public void update(int elementsReceived, float queueSize, boolean EOS, String streamID) {
            if (!this.enabled) {
                return;
            }
            long nanos = System.nanoTime();
            this.receivedStatistics[this.receivedStatistics_idx].elements = elementsReceived;
            this.receivedStatistics[this.receivedStatistics_idx].queueSize = queueSize;
            this.receivedStatistics[this.receivedStatistics_idx++].secs = nanos * 1.0e-9;
            this.receivedStatistics_idx = this.receivedStatistics_idx % this.historyWindow;
            if (!EOS) {
                if (!this.activeStreamIDs.contains(streamID)) {
                    this.activeStreamIDs.add(streamID);
                }
            } else {
                this.activeStreamIDs.remove(streamID);
            }
        }

        /**
         * @generated
         */
        public PortStatistics retrieve() {
            if (!this.enabled) {
                return null;
            }
            long nanos = System.nanoTime();
            double secs = nanos * 1.0e-9;
            int idx = (this.receivedStatistics_idx == 0) ? (this.historyWindow - 1) : (this.receivedStatistics_idx - 1) % this.historyWindow;
            double front_sec = this.receivedStatistics[idx].secs;
            double totalTime = secs - this.receivedStatistics[this.receivedStatistics_idx].secs;
            double totalData = 0;
            float queueSize = 0;
            int startIdx = (this.receivedStatistics_idx + 1) % this.historyWindow;
            for (int i = startIdx; i != receivedStatistics_idx; ) {
                totalData += this.receivedStatistics[i].elements;
                queueSize += this.receivedStatistics[i].queueSize;
                i = (i + 1) % this.historyWindow;
            }
            int receivedSize = receivedStatistics.length;
            synchronized (this.runningStats) {
                this.runningStats.timeSinceLastCall = (float)(secs - front_sec);
                this.runningStats.bitsPerSecond = (float)((totalData * this.bitSize) / totalTime);
                this.runningStats.elementsPerSecond = (float)(totalData / totalTime);
                this.runningStats.averageQueueDepth = (float)(queueSize / receivedSize);
                this.runningStats.callsPerSecond = (float)((receivedSize - 1) / totalTime);
                this.runningStats.streamIDs = this.activeStreamIDs.toArray(new String[0]);
            }
            return runningStats;
        }
    }
    
