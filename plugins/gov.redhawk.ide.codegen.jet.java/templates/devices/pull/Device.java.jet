<%@ jet 
package="gov.redhawk.ide.codegen.jet.java.template.component.pull"
class="DeviceJavaTemplate"
skeleton="../../generator.skeleton2" 
imports="gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.Property
gov.redhawk.ide.codegen.java.JavaCodegenProperty
gov.redhawk.ide.codegen.java.JavaGeneratorUtils
gov.redhawk.ide.codegen.java.StructSequenceJavaCodegenProperty
gov.redhawk.ide.codegen.jet.java.JavaTemplateParameter
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.model.sca.util.ModelUtil
import java.util.Arrays
java.util.List
java.util.Map
java.util.Date
org.eclipse.core.runtime.IPath
mil.jpeojtrs.sca.prf.AbstractProperty
import mil.jpeojtrs.sca.prf.AccessType
mil.jpeojtrs.sca.prf.PropertyConfigurationType
mil.jpeojtrs.sca.prf.impl.SimpleImpl
mil.jpeojtrs.sca.scd.Ports
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.emf.common.util.EList
org.eclipse.core.runtime.Platform
org.eclipse.core.runtime.IProduct"
%>

<%
    JavaTemplateParameter template = (JavaTemplateParameter) argument;
    ImplementationSettings implSettings = template.getImplSettings();
    SoftPkg softPkg = template.getSoftPkg();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    String pkg = template.getPackage();
    Ports ports = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts();
    EList<Provides> provides = ports.getProvides();
    EList<Uses> uses = ports.getUses();
    Map<String, AbstractProperty> properties = JavaGeneratorUtils.createPropertiesSet(softPkg, "prop");
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    boolean proBulkio = false;
    boolean autoStart = false;
    boolean hasSDDSProvides = false;
    boolean hasProvidesMessagePort = false;
    Date date = new Date(System.currentTimeMillis());
    
    for (Property tempProp : implSettings.getProperties()) {              
        if ("auto_start".equals(tempProp.getId())) {
            if (Boolean.parseBoolean(tempProp.getValue())) {
                autoStart = true;
                continue;
            }
        }
    }
    for (Provides pro : provides) {
        final String repId = pro.getRepID(); 
        if (repId.startsWith("IDL:BULKIO")) {
            proBulkio = true;
            if (repId.contains("dataSDDS")) {
                hasSDDSProvides = true;
                break;
            }
        }
    }
%>

package <%=pkg%>;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;
import CF.DataType;
import CF.InvalidObjectReference;
import CF.DevicePackage.AdminType;
import CF.DevicePackage.OperationalType;
import CF.DevicePackage.UsageType;
import org.apache.log4j.Logger;
import org.ossie.component.*;
<%if (properties.size() > 0){%>
import org.ossie.properties.*;
<%}%>

<%if ((provides.size() > 0) || (uses.size() > 0)){%>
<%  if (proBulkio){%>
<%    if (properties.size() == 0){%>
import org.ossie.properties.AnyUtils;
<%    }%>
import BULKIO.StreamSRI;
<%    if (hasSDDSProvides){%>
import BULKIO.PrecisionUTCTime;
import BULKIO.SDDSStreamDefinition;
import BULKIO.dataSDDSPackage.AttachError;
import BULKIO.dataSDDSPackage.DetachError;
import BULKIO.dataSDDSPackage.StreamInputError;
<%    }%>
<%  }
boolean foundGeneratedPort = false;
boolean foundPortFromEvents = false;
for (Provides pro : provides) {
	if (!pro.getRepID().equals("IDL:ExtendedEvent/MessageEvent:1.0")) {
		foundGeneratedPort = true;
	} else {
		foundPortFromEvents = true;
	}
}
for (Uses use : uses) {
	if (!(use.getRepID().equals("IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0") && use.getUsesName().equals("propEvent"))) {
		foundGeneratedPort = true;
	} else {
		foundPortFromEvents = true;
	}
}
if (foundGeneratedPort) {
%>
import <%=pkg%>.ports.*;
<%
}
if (foundPortFromEvents) {
%>
import org.ossie.events.*;
<%
}
}
%>

/**
 * This is the Device code. This file contains all the access points
 * you need to use to be able to access all input and output ports,
 * respond to incoming data, and perform general device housekeeping
 *
 * Source: <%=ModelUtil.getSpdFileName(softPkg)%>
 * Generated on: <%= date.toString() %>
<%
	String[] output;
	IProduct product = Platform.getProduct();
	if (product != null) {
		output = product.getProperty("aboutText").split("\n");
%>
 * <%=output[0]%>
 * <%=output[1]%>
 * <%=output[2]%>
<%
	}
%> 
 
 * @generated
 */
public class <%=PREFIX%> extends Device implements Runnable {
    /**
     * @generated
     */
    public final static Logger logger = Logger.getLogger(<%=PREFIX%>.class.getName());
    
<%List<JavaCodegenProperty> javaProperties = JavaGeneratorUtils.createJavaProps(1, properties);%>
<%for (JavaCodegenProperty property : javaProperties) {%>
    <%=property.toString()%>
<%}%> 
    // Provides/inputs
<%for (Provides pro : provides) {
      Interface iface = IdlUtil.getInstance().getInterface(search_paths, pro.getRepID().split(":")[1], true);
      String nameSpace = iface.getNameSpace();
      String interfaceName = iface.getName();
	  if (nameSpace.equals("ExtendedEvent") && interfaceName.equals("MessageEvent")) {
	  	 hasProvidesMessagePort = true;
%>
    public MessageConsumerPort port_<%=pro.getProvidesName()%>;
<%
	  } else {
%>
    /**
     * @generated
     */
    public <%=JavaGeneratorUtils.repIdToClassPrefix(pro.getRepID())%>InPort port_<%=pro.getProvidesName()%>;
<%
	  }
}
%>

    // Uses/outputs
<%

for (Uses use : uses) {%>
    /**
     * @generated
     */
<%
      Interface iface = IdlUtil.getInstance().getInterface(search_paths, use.getRepID().split(":")[1], true);
      String nameSpace = iface.getNameSpace();
      String interfaceName = iface.getName();
      String entry = use.getRepID();
      // Loop over provides ports to see if there is a matching interface and port name for the current uses port
      // If so, ignore the uses port
      // This is to support bi-directional ports
      boolean foundMatchingProvides = false;
      for (Provides pro : provides) {
          String entryProvides = pro.getRepID();
          if (entry.equals(entryProvides) && use.getUsesName().equals(pro.getProvidesName())) {
              foundMatchingProvides = true;
              break;
          }
      }
      if (foundMatchingProvides == false){ 
          if (use.getRepID().equals("IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0")) {
              if (use.getUsesName().equals("propEvent")) { %>
    public PropertyEventSupplier port_<%=use.getUsesName()%>;
<%            } else {
%>
    public <%=JavaGeneratorUtils.repIdToClassPrefix(use.getRepID())%>OutPort port_<%=use.getUsesName()%>;
<%            }
	      } else if (nameSpace.equals("ExtendedEvent") && interfaceName.equals("MessageEvent")) {
%>
    public <%=nameSpace%>_<%=interfaceName%>OutPort port_<%=use.getUsesName()%>;
<%
	      } else {
%>
    public <%=JavaGeneratorUtils.repIdToClassPrefix(use.getRepID())%>OutPort port_<%=use.getUsesName()%>;
<%
          }
      }
%>
<%}%>

    /**
     * @generated
     */
    public <%=PREFIX%>() 
    {
        super();
       	this.usageState = UsageType.IDLE;
      	this.operationState = OperationalType.ENABLED;
      	this.adminState = AdminType.UNLOCKED;
      	this.callbacks = new HashMap<String, AllocCapacity>();
<%for (JavaCodegenProperty property : javaProperties) {%>
    <%if (property instanceof StructSequenceJavaCodegenProperty) {%>
        <%=((StructSequenceJavaCodegenProperty)property).getStructVals()%>
        <%=((StructSequenceJavaCodegenProperty)property).getNewStructSequence()%>
    <%}%>  
<%}%>  
<%for (String prop : properties.keySet()) {%>
        addProperty(<%=prop%>);
<%}%>

<%
// Checks to make sure there is at least 1 write property
boolean printComments = false;
for (String prop : properties.keySet()){
	if (properties.get(prop).getMode() != AccessType.READONLY){
		printComments = true;
		break;
	}
}
if (printComments){%>
		// Inits the call back classes
<%
}
for (String prop : properties.keySet()) {
	// No call back needed for read only
 	if (properties.get(prop).getMode() != AccessType.READONLY && (properties.get(prop) instanceof SimpleImpl)){ %>
		<%=prop%>_callback <%=prop%>_call_var = new <%=prop%>_callback();
<%
	}
}
if (printComments){%>

		// Adds call backs to map
<%
}
for (String prop : properties.keySet()) {
	// No call back needed for read only
 	if (properties.get(prop).getMode() != AccessType.READONLY && (properties.get(prop) instanceof SimpleImpl)){ %>
		callbacks.put(<%=prop%>.getId(), <%=prop%>_call_var);
<%
	}
}
%>

        // Provides/input
<%for (Provides pro : provides)
{
    Interface iface = IdlUtil.getInstance().getInterface(search_paths, pro.getRepID().split(":")[1], true);
    String nameSpace = iface.getNameSpace();
    String interfaceName = iface.getName();

    if (nameSpace.equals("ExtendedEvent") && interfaceName.equals("MessageEvent")) {
%>
        this.port_<%=pro.getProvidesName()%> = new MessageConsumerPort("<%=pro.getProvidesName()%>");
        this.addPort("<%=pro.getProvidesName()%>", this.port_<%=pro.getProvidesName()%>);
<%
    } else {
%>
        this.port_<%=pro.getProvidesName()%> = new <%=JavaGeneratorUtils.repIdToClassPrefix(pro.getRepID())%>InPort(this, "<%=pro.getProvidesName()%>");
        this.addPort("<%=pro.getProvidesName()%>", this.port_<%=pro.getProvidesName()%>);
<%
	}
}
%>

        // Uses/output
<%for (Uses use : uses) {
    Interface iface = IdlUtil.getInstance().getInterface(search_paths, use.getRepID().split(":")[1], true);
    String nameSpace = iface.getNameSpace();
    String interfaceName = iface.getName();
    String entry = use.getRepID();
    // Loop over provides ports to see if there is a matching interface and port name for the current uses port
    // If so, ignore the uses port
    // This is to support bi-directional ports
    boolean foundMatchingProvides = false;
    for (Provides pro : provides) {
        String entryProvides = pro.getRepID();
        if (entry.equals(entryProvides) && use.getUsesName().equals(pro.getProvidesName())) {
            foundMatchingProvides = true;
            break;
        }
    }
    if (foundMatchingProvides == false){
        if ("propEvent".equals(use.getUsesName()) && "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0".equals(use.getRepID())) {
%>
        this.port_<%=use.getUsesName()%> = new PropertyEventSupplier("<%=use.getUsesName()%>");
<%
        } else if (nameSpace.equals("ExtendedEvent") && interfaceName.equals("MessageEvent")) {
%>
        this.port_<%=use.getUsesName()%> = new <%=nameSpace%>_<%=interfaceName%>OutPort("<%=use.getUsesName()%>");
<%
        } else {
%>
        this.port_<%=use.getUsesName()%> = new <%=JavaGeneratorUtils.repIdToClassPrefix(use.getRepID())%>OutPort("<%=use.getUsesName()%>");
<%
        }
%>
        this.addPort("<%=use.getUsesName()%>", this.port_<%=use.getUsesName()%>);
<%  } // if (foundMatchingProvides == false)
} // for (Uses use: uses) %>
    
       //begin-user-code
       //end-user-code
    }
    
    
<%for (String prop : properties.keySet()) {
	// No call back needed for read only or non-simple props
 	if (properties.get(prop).getMode() != AccessType.READONLY && (properties.get(prop) instanceof SimpleImpl)){ %>
 	/**
 	 * Call back class for <%=prop%>
 	 *
 	 * -User can custom design allocation and deallocation
 	 * -Otherwise basic auto alloc / dealloc will be used
 	 *
 	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
 	 */
    public class <%=prop%>_callback implements AllocCapacity {
    	public boolean allocate(DataType t) {
    		/* - TODO User defined allocate functions go here
    		 * - Returns:
    		 *		true  -> successful allocate
    		 *		false -> failure to allocate
    		 */
			logger.trace("Attempting user defined allocate");
    		return false;
    	}
		public boolean deallocate(DataType t){
    		/* - TODO User defined deallocate functions go here
    		 * - Returns :
    		 *      true  -> if user specifies their own function
    		 *      false -> if no deallocate function is defined
    		 */
			logger.trace("Attempting user defined deallocate");
    		 return false;
    	}
    }
	<%}%>
<%}%>

<%for (Uses use : uses) {
    Interface iface = IdlUtil.getInstance().getInterface(search_paths, use.getRepID().split(":")[1], true);
    String nameSpace = iface.getNameSpace();
    String interfaceName = iface.getName();
    String entry = use.getRepID();
    // Loop over provides ports to see if there is a matching interface and port name for the current uses port
    // If so, ignore the uses port
    // This is to support bi-directional ports
    boolean foundMatchingProvides = false;
    for (Provides pro : provides) {
        String entryProvides = pro.getRepID();
        if (entry.equals(entryProvides) && use.getUsesName().equals(pro.getProvidesName())) {
            foundMatchingProvides = true;
            break;
        }
    }
    if (foundMatchingProvides == false){
        if ("propEvent".equals(use.getUsesName()) && "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0".equals(use.getRepID())) {
%>

    /**
     * @generated
     */
    public CF.Resource setup(final String compId, final String compName, final ORB orb, final POA poa) throws ServantNotActive, WrongPolicy
    {
    	CF.Resource retval = super.setup(compId, compName, orb, poa);
    	
<%
			for (String prop : properties.keySet()) {
				if (properties.get(prop).isKind(PropertyConfigurationType.EVENT)) {
%>
        this.port_<%=use.getUsesName()%>.registerProperty(this.compId, this.compName, this.<%=prop%>);
<%
				}
			}
%>
        
        this.registerPropertyChangePort(this.port_<%=use.getUsesName()%>);
        
        //begin-user-code
        //end-user-code
        
    	return retval;
    }
<%
        	break;
        }
%>
<%  } // if (foundMatchingProvides == false)
} // for (Uses use: uses) %>
    
<%if (hasProvidesMessagePort || autoStart) {%>
    /**
     * @generated
     */
    @Override
	public void initialize() throws InitializeError {
		super.initialize();
<%   if (autoStart){%>
		try {
			super.start();
		} catch (StartError e) {
			throw new InitializeError("Error auto-starting device", new String[] { e.msg });
		}
<%   }%>
	}

<%}%>
<%if (proBulkio) {%>
    /**
     * @generated
     */
    public boolean compareSRI(StreamSRI SRI_1, StreamSRI SRI_2){
        if (SRI_1.hversion != SRI_2.hversion)
            return false;
        if (SRI_1.xstart != SRI_2.xstart)
            return false;
        if (SRI_1.xdelta != SRI_2.xdelta)
            return false;
        if (SRI_1.xunits != SRI_2.xunits)
            return false;
        if (SRI_1.subsize != SRI_2.subsize)
            return false;
        if (SRI_1.ystart != SRI_2.ystart)
            return false;
        if (SRI_1.ydelta != SRI_2.ydelta)
            return false;
        if (SRI_1.yunits != SRI_2.yunits)
            return false;
        if (SRI_1.mode != SRI_2.mode)
            return false;
        if (SRI_1.streamID != SRI_2.streamID)
            return false;
        if (SRI_1.keywords.length != SRI_2.keywords.length)
            return false;
        String action = "eq";
        for (int i=0; i < SRI_1.keywords.length; i++) {
            if (!SRI_1.keywords[i].id.equals(SRI_2.keywords[i].id)) {
                return false;
            }
            if (!SRI_1.keywords[i].value.type().equivalent(SRI_2.keywords[i].value.type())) {
                return false;
            }
            if (AnyUtils.compareAnys(SRI_1.keywords[i].value, SRI_2.keywords[i].value, action)) {
                return false;
            }
        }
        return true;
    }

<%  if (hasSDDSProvides){%>
    /**
     * @generated
     */
    public boolean compareTime(final PrecisionUTCTime T1, final PrecisionUTCTime T2){
    	if (T1.tcmode != T2.tcmode)
    		return false;
    	if (T1.tcstatus != T2.tcstatus)
    		return false;
    	if (T1.tfsec != T2.tfsec)
    		return false;
    	if (T1.toff != T2.toff)
    		return false;
    	if (T1.twsec != T2.twsec)
    		return false;
    	return true;
    }

    /**
     * This method is used to handle the attach call and return an attachId for the connection.
     * The value of the attachId should be unique across attach calls within this device instance.
     * 
     * @param stream the new stream definition
     * @param userId the userId for the stream
     * @return an id for this attach call that is unique across all calls within this device instance.
	 * @throws AttachError
	 * @throws StreamInputError
     * @generated
     */
	public String attach(SDDSStreamDefinition stream, String userId) throws AttachError, StreamInputError {
		String attachId = "";
		
        //begin-user-code
		// TODO Fill in this method to handle attach and set attachId to a value unique to this device 
        //end-user-code

		return attachId;
	}

	/**
     * This method is used to handle the detach call.
	 * 
	 * @param attachId the attachId from a previous call to attach
	 * @throws DetachError
	 * @throws StreamInputError
	 * @generated
	 */
	public void detach(String attachId) throws DetachError, StreamInputError {
        //begin-user-code
		// TODO Fill in this method to handle detach 
        //end-user-code
	}

<%  }%>
<%}%>
    /**
     *
     * Main processing thread
     *
     * <!-- begin-user-doc -->
     * 
     * General functionality:
     * 
     *    This function is running as a separate thread from the device's main thread. 
     *    
     *    The IDE uses JMerge during the generation (and re-generation) process.  To keep
     *    customizations to this file from being over-written during subsequent generations,
     *    put your customization in between the following tags:
     *      - //begin-user-code
     *      - //end-user-code
     *    or, alternatively, set the @generated flag located before the code you wish to 
     *    modify, in the following way:
     *      - "@generated NOT"
     * 
     * StreamSRI:
     *    To create a StreamSRI object, use the following code:
     *        this.stream_id = "stream";
     * 		  StreamSRI sri = new StreamSRI();
     * 		  sri.mode = 0;
     * 		  sri.xdelta = 0.0;
     * 		  sri.ydelta = 1.0;
     * 		  sri.subsize = 0;
     * 		  sri.xunits = 1; // TIME_S
     * 		  sri.streamID = (this.stream_id.getValue() != null) ? this.stream_id.getValue() : "";
     * 
     * PrecisionUTCTime:
     *    To create a PrecisionUTCTime object, use the following code:
     * 		  long tmp_time = System.currentTimeMillis();
     * 		  double wsec = tmp_time / 1000;
     * 		  double fsec = tmp_time % 1000;
     * 		  PrecisionUTCTime tstamp = new PrecisionUTCTime(BULKIO.TCM_CPU.value, (short)1, (short)0, wsec, fsec);
     * 
     * Ports:
     * 
     *    Each port instance is accessed through members of the following form: this.port_<PORT NAME>
     * 
     *    Data is obtained in the run function through the getPacket call (BULKIO only) on a
     *    provides port member instance. The getPacket function call is non-blocking; it takes
     *    one argument which is the time to wait on new data. If you pass 0, it will return
     *    immediately if no data available (won't wait).
     *    
     *    To send data, call the appropriate function in the port directly. In the case of BULKIO,
     *    convenience functions have been added in the port classes that aid in output.
     *    
     *    Interactions with non-BULKIO ports are left up to the device developer's discretion.
     *    
     * Properties:
     * 
     *    Properties are accessed through members of the same name with helper functions. If the 
     *    property name is baudRate, then reading the value is achieved by: this.baudRate.getValue();
     *    and writing a new value is achieved by: this.baudRate.setValue(new_value);
     *    
     * Example:
     * 
     *    This example assumes that the device has two ports:
     *        - A provides (input) port of type BULKIO::dataShort called dataShort_in
     *        - A uses (output) port of type BULKIO::dataFloat called dataFloat_out
     *    The mapping between the port and the class is found the class of the same name.
     *    This example also makes use of the following Properties:
     *        - A float value called amplitude with a default value of 2.0
     *        - A boolean called increaseAmplitude with a default value of true
     *    
     *    BULKIO_dataShortInPort.Packet<short[]> data = this.port_dataShort_in.getPacket(125);
     *
     *    if (data != null) {
     *        float[] outData = new float[data.getData().length];
     *        for (int i = 0; i < data.getData().length; i++) {
     *            if (this.increaseAmplitude.getValue()) {
     *                outData[i] = (float)data.getData()[i] * this.amplitude.getValue();
     *            } else {
     *                outData[i] = (float)data.getData()[i];
     *            }
     *        }
     *
     *        // NOTE: You must make at least one valid pushSRI call
     *        if (data.sriChanged()) {
     *            this.port_dataFloat_out.pushSRI(data.getSRI());
     *        }
     *        this.port_dataFloat_out.pushPacket(outData, data.getTime(), data.getEndOfStream(), data.getStreamID());
     *    }
     *      
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public void run() 
    {
        //begin-user-code
        //end-user-code
        
        while(this.started())
        {
            //begin-user-code
            // Process data here
            try {
                logger.debug("run() example log message");
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                break;
            }
            
            //end-user-code
        }
        
        //begin-user-code
        //end-user-code
    }
        
    /**
     * The main function of your device.  If no args are provided, then the
     * CORBA object is not bound to an SCA Domain or NamingService and can
     * be run as a standard Java application.
     * 
     * @param args
     * @generated
     */
    public static void main(String[] args) 
    {
        final Properties orbProps = new Properties();

        //begin-user-code
        // TODO You may add extra startup code here, for example:
        // orbProps.put("com.sun.CORBA.giop.ORBFragmentSize", Integer.toString(fragSize));
        //end-user-code

        try {
            Device.start_device(<%=PREFIX%>.class, args, orbProps);
        } catch (InvalidObjectReference e) {
            e.printStackTrace();
        } catch (ServantNotActive e) {
            e.printStackTrace();
        } catch (WrongPolicy e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

        //begin-user-code
        // TODO You may add extra shutdown code here
        //end-user-code
    }
}
